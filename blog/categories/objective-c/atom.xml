<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective C | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2014-03-17T18:12:04+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Grid Thumbnails]]></title>
    <link href="http://artsy.github.io/blog/2012/09/13/on-grid-thumbnails/"/>
    <updated>2012-09-13T16:40:00+01:00</updated>
    <id>http://artsy.github.io/blog/2012/09/13/on-grid-thumbnails</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2012-09-13-on-grid-thumbnails/grid.jpg"></p>

<p>Artsy Folio, our free iPad app for Gallery Partners, had been in the App Store for a couple of weeks before the iPad with a Retina display was announced. This had been something we expected internally and felt the application would be ready. We had all our image assets available in <em>@2x</em> versions and an image pipeline that would take scaling into account. With that in mind, we changed our artwork grid view to show a double resolution image. Finally, once we were happy that it worked fine on the simulator, we sent the build off to Apple for review.</p>

<p>The app passed review, and was Retina-ready before the actual release. But within hours of getting our hands on a real Retina iPad, we had to pull the app. This post will explain why, and what we did to work it out.</p>

<!--more-->


<p>Scrolling the grid view was slow. Extremely slow. The reason why wasn't obvious initially, but thanks to digging around using <a href="http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html">Instruments</a>, we saw that a great deal of time was spent in Apple's image processing libraries. This was a strong hint that the problem involved taking the file and getting it to the screen.</p>

<p>In our naiveté, Folio was originally using <code>UIImage</code>'s <code>initWithContentsOfFile:</code> to load (without caching) a jpg from the file system. Once the file was loaded into memory, we displayed it onscreen in an <code>UIImageView.</code> This was fast enough to deal with our small thumbnails of <em>240x240</em> but the moment that you start asking it to pull 3 or 4 <em>480x480</em> jpg files off the filesystem, decompress them and then put them on the screen, you're not going to have a smooth scroll.</p>

<p><img src="http://artsy.github.io/images/2012-09-13-on-grid-thumbnails/thumbnails.jpg"></p>

<p>As we knew that we were looking at an issue with getting images from a file, it made sense to start looking at ways to move image processing off the main thread. This Stack Overflow thread on <a href="http://stackoverflow.com/questions/1815476/cgimage-uiimage-lazily-loading-on-ui-thread-causes-stutter">UIImage lazy loading</a> proved to be an essential start to dealing with our issue. We needed a thread-safe way to get the contents of a file and to pass them through once the images had been decoded. What we needed was <a href="https://gist.github.com/3715588">initImmediateLoadWithContentsOfFile</a>, a thread-safe way to go from a filepath to a <code>UIImage</code>.</p>

<p>Now that we had a way to get an image that was safe to go on a background thread, we gave our grid an <code>NSOperationQueue</code> and created a method to kick off a <code>NSInvocationOperation</code> with our the cell we're looking at and the address it needs to load the thumbnail.</p>

<p>``` objc
- (void)setImageAsyncAtPath:(NSString <em>)imageAddress forGridCell:(ARImageGridViewCell </em>)cell {
    NSDictionary <em>operationOptions = @{@"address": imageAddress, @"cell": cell};
    NSInvocationOperation </em>operation = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(asyncLoadImage:) object:operationOptions];</p>

<pre><code>[_operationQueue addOperation:operation];
</code></pre>

<p>}
```</p>

<p>When we had the simplest implementation of <code>asyncLoadImage</code> we found that scrolling would sometimes result in grid cells displaying the wrong image. It turned out that in the time it took to decode the jpg,  the cell had already been reused for a different artwork. This one totally caught us off guard!</p>

<p>``` objc
- (void)asyncLoadImage:(NSDictionary <em>)options {
    @autoreleasepool {
        NSString </em>address = options[@"address"];
        ARImageGridViewCell *cell = options[@"cell"];</p>

<pre><code>    // don't load if it's on a different cell
    if ([cell.imagePath isEqualToString:address]) {
        UIImage *thumbnail = [[UIImage alloc] initImmediateLoadWithContentsOfFile:address];

        // double check that during the decoding the cell's not been re-used
        if ([cell.imagePath isEqualToString:address] &amp;&amp; thumbnail) {
            [cell performSelectorOnMainThread:@selector(setImage:) withObject:thumbnail waitUntilDone:NO];
        }
    }
}
</code></pre>

<p>}
```</p>

<p>This meant we could have our UI thread dealing with scrolling, whilst <a href="https://developer.apple.com/technologies/mac/core.html">Grand Central Dispatch</a> would deal with ensuring the image processing was done asynchronously and as fast as possible.However, this still wasn't enough. We were finding if you scrolled fast enough, you could still see images pop in after the grid cell was visible. For this, we actually went back to the beginning, and made our image pipeline create a <em>120x120</em> thumbnail for each artwork that we use <code>initImmediateLoadWithContentsOfFile</code> to load on the UI thread. This is fast enough to smoothly scroll, and is replaced by the higher resolution image practically instantly.</p>

<p><img src="http://artsy.github.io/images/2012-09-13-on-grid-thumbnails/hover-thumbnails.jpg"></p>

<p>The rest of the story is pretty straightforward. We wrapped all this up within a few days and got out a version of Folio for the Retina iPad, I ended up doing a talk about the issues involved in doing this in <a href="http://lsx.co/lsxcafe/">Leeds LSxCafé</a>, and you got a blog post out of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Our Objective-C Code Standards]]></title>
    <link href="http://artsy.github.io/blog/2012/08/14/on-objective-c-code-standards/"/>
    <updated>2012-08-14T14:23:00+01:00</updated>
    <id>http://artsy.github.io/blog/2012/08/14/on-objective-c-code-standards</id>
    <content type="html"><![CDATA[<p>With the release of Xcode 4.4 I've taken a look back at our existing code standards and tried to come up with something that is cleaner and more elegant. Here are a few of the ideas I've been using to modernize the codebase.</p>

<h3>Remove private method declarations and use class extensions to add ivars.</h3>

<p>First to get chopped by the deletion button are private method declarations. After Xcode 4.2 came out we took to using the class extension feature to add private method declarations at the top of implementation files. This was a nice way of keeping private methods out of the header files. Now that the compiler will check for pre-existing method signatures within the same object there's no need to define their interfaces.</p>

<!--more-->


<p>Occasionally it's necessary for subclass to know about private methods defined by its superclass, so we use a shared category to let them know what they respond to. Like Apple, we also quit using <code>@private</code> in header files.</p>

<p>Ivars now should go in class extensions, and be prefixed by an underscore. Apple advises that you don't use method names with underscores but encourage underscored variable names. This also can free up method parameters from having ugly names such as anArtwork or aString.</p>

<h3>Use object literals when possible.</h3>

<p>Object literals are ways of adding syntacitcal sugar to the Objective-C language, they let you access keys and values easily on <code>NSDictionary</code>s and objects in <code>NSArray</code>s. There's no reason to not be using them if you're supporting iOS 4 and above. It's simple a matter of <code>_artworks[2]</code> vs <code>[_artworks objectAtIndex:2]</code>.</p>

<h3>Dot syntax is OK for non-properties.</h3>

<p>OK so, I admit it. I whined when properties came out. It was back in 2007 and the Objective-C was ranked 40th in the world, it's now ranked <a href="http://www.tiobe.com/index.php/paperinfo/tpci/Objective-C.html">3nd most popular programming language.</a> Within timeframe, my opinion on the subject of properties changed also.</p>

<p>Originally when properties came out they exclusively were given the right to use dot notation on objects. This makes sense as they were created to provide public access to ivars which normally you can only access internally using the dot notation. With Xcode 4.3, that also changed. Now, if a method doesn't have any arguments it can be called using dot notation. I'm in favour of using this. For me a good rule of thumb has been if a method returns something, dot notation is OK. For example, <code>_artworksArray.count</code> is fine whilst <code>_parsingOperation.stop</code> isn't.</p>

<h3>Keep external code out of your project.</h3>

<p>External, or vendored code should be kept out of the main body of your code. You can use CocoaPods to keep all that code in check and up-to-date. CocoaPods is a project that aims to be what bundler does for ruby projects, or npm for node. It will deal with your dependancies whilst you can concentrate on your own code. It will create a seperate Xcode project that handles all you dependancies leaving your project only as your own code.</p>

<h3>Use umbrella imports.</h3>

<p>To try and keep the amount of noise we have at the top of our implementation files we have started to reduce the number of <code>#import "ARModel.h"</code> lines we use. By creating a <code>Models.h</code> file and having that include all the models it means we can still have a look through the <code>#imports</code> at the top to get an idea of the connections between the objects as that will only show the important imports. These can optionally be moved into your precompiled header files.</p>

<h3>Keep your code clean.</h3>

<p>Whitespace can and does slowly accumulate at the line-endings of your code. You should make sure that the new preference for automatically trimming whitespace is turned on in the text editing section of Xcode's preferences.</p>

<h3>IBOutlets should probably go in your class extensions.</h3>

<p>With modern versions of Xcode, it doesn't matter that your IBOutlets are defined in places other than in headers. As Objective-C developers, we've come a long way from having to repeatedly drag a .h from Xcode to Interface Builder, so maybe it's time to rethink the idea that our interface outlets should be publicly accessible. My opinion is that a controller's views are for the most part a private affair and that if you want to expose their functionality you do it through custom methods in the controller. There are some downsides to this, in that  initially you have to change to the implementation file when using hybrid view when connecting them.</p>

<p>These decisions have come from internal discussions and from watching many WWDC sessions on the topic. We highly recommend watching the following <a href="https://developer.apple.com/wwdc/">WWDC sessions</a>.</p>

<p>  <a href="https://developer.apple.com/videos/wwdc/2011/">WWDC 2011</a>: 105 Polishing Your App, 112 Writing Easy To Change Code and 322 - Objective-C Advancements in Depth.</p>

<p>  <a href="https://developer.apple.com/videos/wwdc/2012/">WWDC 2012</a>: 405 Modern Objective-C and 413 Migrating to Modern Objective-C</p>
]]></content>
  </entry>
  
</feed>
