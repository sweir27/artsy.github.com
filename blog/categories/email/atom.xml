<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Email | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/email/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2014-03-12T10:52:51-04:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Normalizing GMail E-Mail Addresses with CanonicalEmails]]></title>
    <link href="http://artsy.github.io/blog/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails/"/>
    <updated>2013-06-23T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails</id>
    <content type="html"><![CDATA[<p>A whopping 49% of Artsy users have "gmail.com" email addresses. The next domain name, "hotmail.com", doesn't even come close, with only 6%.</p>

<p><img src="http://artsy.github.io/images/2013-06-23-normalizing-gmail-email-addresses-with-canonical-emails/artsy-email-domains.png" /></p>

<p>GMail addresses ignore periods and are case-insensitive. For example, "Donald.Duck@gmail.com" and "donaldduck@gmail.com" are the same account. You can log-in to GMail with both. Users often register with the former and try to log-in to Artsy with the latter. With so many GMail users, expect a dozen support emails per day.</p>

<p>The solution is to normalize these emails into a canonical form.</p>

<!-- more -->


<p>We use our newly open-sourced gem called <a href="https://github.com/dblock/canonical-emails">canonical-emails</a>. It patches <code>Mail::Address</code> methods at runtime.</p>

<p>``` ruby
module CanonicalEmails
  module GMail
    def self.transform(value)
      Mail::Address.new(value).tap do |email|
        if email.domain &amp;&amp; [ "gmail.com" ].include?(email.domain.downcase)
          email.instance_eval do
            def get_local
              value = super
              value.gsub(".", "").downcase if value
            end
            def domain
              value = super
              value.downcase if value
            end
          end
        end if value
      end
    end</p>

<p>  end
end
```</p>

<p>It would be great to see contributions to our gem if you have knowledge of special handling with other email providers!</p>

<p>On the application side, Artsy stores both the original email address entered by the user and the canonical representation and perform all lookups by the canonical value.</p>

<p>``` ruby
class User
  include Mongoid::Document
  include CanonicalEmail::Extensions</p>

<p>  field :email, type: String
  field :lookup_email, type: String
  before_save :update_lookup_email
  canonical_email :email, CanonicalEmails::GMail, CanonicalEmails::Downcase</p>

<p>  def self.find_by_email(email)
    email = CanonicalEmails::GMail.transform(email).to_s
    email = CanonicalEmails::Downcase.transform(email).address
    first(lookup_email: email)
  end</p>

<p>  private</p>

<p>  def update_lookup_email
    self.lookup_email = self.canonical_email
  end</p>

<p>end
```</p>

<p>What is your email domain breakdown? Here's the MongoDB/Mongoid/ruby map/reduce that I used to get the graph above.</p>

<p>``` ruby
map = %Q{
  function() {
    emit((this.email).split("@")[1], { count: 1 });
  }
}</p>

<p>reduce = %Q{
  function(key, values) {
    var result = { count: 0 };
    values.forEach(function(value) {
      result.count += value.count;
    });
    return result;
  }
}</p>

<p>User.all.map_reduce(map, reduce)
  .out(inline: true)
  .sort_by{ |v| -v["value"]["count"] }
  .take(10)
  .map { |v| { v["_id"] => v["value"]["count"] / User.count }}
```</p>

<p>Raw output for our top 10.</p>

<pre><code>[
  { "gmail.com" =&gt; 0.49 }, 
  { "hotmail.com" =&gt; 0.06 },
  { "yahoo.com" =&gt; 0.057 }, 
  { "aol.com" =&gt; 0.017 }, 
  { "me.com" =&gt; 0.015 }, 
  { "mac.com" =&gt; 0.012 }, 
  { "comcast.net" =&gt; 0.008 }, 
  { "msn.com" =&gt; 0.003 }, 
  { "mail.ru" =&gt; 0.003 }, 
  { "verizon.net" =&gt; 0.003 }
]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Automatic Plain Text MIME Parts with Rails ActionMailer]]></title>
    <link href="http://artsy.github.io/blog/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer/"/>
    <updated>2012-05-16T20:52:00-04:00</updated>
    <id>http://artsy.github.io/blog/2012/05/16/generating-automatic-plain-text-mime-parts-with-rails-actionmailer</id>
    <content type="html"><![CDATA[<p>E-mail is one of the most important ways to engage your users. And every time you touch a user's inbox, it reflects on your brand. But getting email right has become increasing difficult due to the complexities introduced by the thousands of web-based, desktop and mobile mail clients. Email formatting is like the "Hunger Games" where the major players include online services such as GMail, Yahoo, Hotmail or AOL, desktop clients such as Outlook and a myriad mobile devices ranging from iPhone and Android to Blackberry.</p>

<p>To deal with this landscape, the MIME standard allows systems to send e-mail with multiple parts: <code>plain/text</code> for business-efficient devices such as the Blackberry, and <code>text/html</code> for web-based e-mail readers, such as GMail. Furthermore, <code>ActionMailer</code> supports multiple template formats: create an <code>.html.haml</code> template along with a <code>.txt.haml</code> template to generate both. We also know that <code>text/plain</code> email helps deliverability, but we believe a disproportionately small amount of text e-mails are actually read - the vast majority of devices are capable of parsing some HTML.</p>

<p>Is it possible to avoid having to maintain two separate templates without sacrificing deliverability? How can we inject a <code>text/plain</code> part into HTML e-mail that is both useful and "free"?</p>

<!--more-->


<p><code>ActionMailer::Base</code> defines an internal method called <code>collect_responses_and_parts_order</code> (<a href="http://apidock.com/rails/ActionMailer/Base/collect_responses_and_parts_order">#ref</a>), which iterates over templates and renders them. Let's override that method and examine the contents of the generated parts.</p>

<p><code>ruby
def collect_responses_and_parts_order(headers)
    responses, parts_order = super(headers)
    [responses, parts_order]
end
</code></p>

<p>Each <code>response</code> is a MIME part with its boundary and the <code>parts_order</code> is the order in which the parts appear in the final e-mail. The <a href="http://www.ietf.org/rfc/rfc1341.txt">MIME RFC 1341</a> says that the parts must be generated in the increasing order of preference, ie. <code>text/html</code> content-type part last, provided you want it to be the preferred format of your email.</p>

<p>We can find whether the generated e-mail contains a <code>plain/text</code> part and otherwise generate one.</p>

<p><code>ruby
html_part = responses.detect { |response| response[:content_type] == "text/html" }
text_part = responses.detect { |response| response[:content_type] == "text/plain" }
if html_part &amp;&amp; ! text_part
  # generate a text/plain part
end
</code></p>

<p>Generating the text part means stripping all HTML with links preserved. <a href="http://nokogiri.org/">Nokogiri</a> has a very convenient deep <code>traverse</code> iterator.</p>

<p><code>ruby
body_parts = []
Nokogiri::HTML(html_part[:body]).traverse do |node|
  if node.text? and ! (content = node.content ? node.content.strip : nil).blank?
    body_parts &lt;&lt; content
  elsif node.name == "a" &amp;&amp; (href = node.attr("href")) &amp;&amp; href.match(/^https?:/)
    body_parts &lt;&lt; href
  end
end
</code></p>

<p>Once we have all the parts, assemble them, get rid of duplicate text and links, and re-insert into the email as a <code>text/plain</code> multipart block.</p>

<p><code>ruby
responses.insert 0, {
  content_type: "text/plain",
  body: body_parts.uniq.join("\n")
}
parts_order.insert 0, "text/plain"
</code></p>

<p>The complete code for <code>ActionMailerWithTextPart</code> is available in <a href="https://gist.github.com/2719486">this gist</a> under the MIT license. Inherit your mailers from this class to get automatic <code>plain/text</code> fallback.</p>
]]></content>
  </entry>
  
</feed>
