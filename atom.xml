<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artsy Engineering]]></title>
  <link href="http://artsy.github.io/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2015-04-09T13:08:05-04:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trying out React]]></title>
    <link href="http://artsy.github.io/blog/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react/"/>
    <updated>2015-04-08T11:30:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/04/08/creating-a-dynamic-single-page-app-for-our-genome-team-using-react</id>
    <content type="html"><![CDATA[<p>We recently picked up a Rails application that was a few features away from completion. This application allows our <a href="https://www.artsy.net/about/the-art-genome-project">Genome Team</a> to classify multiple artworks based on visual and art historical characteristics. These characteristics, or &#8220;genes&#8221;, can be added, removed, and changed for any of the artworks on the panel.</p>

<p><img src="http://cl.ly/image/3T2o2m2m3C1w/Screen%20Shot%202015-04-08%20at%2010.50.02%20AM.png" alt="screenshot" /></p>

<p>Our genomers are masters of efficiency, and over the years we have worked closely with them to tailor a dynamic interface to their specific workflow.</p>

<p>When we started working on the app, the back-end was organized, modular, and interfaced seamlessly with the Artsy API, but there were still a few front-end features we needed to implement before it could be used by the Genome Team. The app did not use a front-end framework, and as our features scaled it was difficult to keep track of UI state with pure CoffeeScript and global event listeners. Eventually, we decided to stop trying to patch our leaky roof and build a new one.</p>

<!-- more -->


<h3>Choosing a Suitable Framework</h3>

<p>We decided to introduce a front-end framework to make it easier to add new features, and spent a day researching different options. Our requirements were:
- A robust view layer that could work on top of our already-solid Rails back-end,
- A framework performant enough for an interaction-heavy single-page app with hundreds of editable fields autosaving on change,
- A streamlined framework that favors freedom over unnecessary structure.</p>

<p>We chose <a href="http://facebook.github.io/react/">React</a>, Facebook&#8217;s view layer framework, because it provides much-needed structure and support for components in a single page app without too much boilerplate.</p>

<p>Our plan was to eventually replace all of the existing <code>*.haml.erb</code> templates and global CoffeeScript mixins with discrete React components. We used the <a href="https://github.com/reactjs/react-rails">react-rails</a> gem, which easily integrates React components with Rails views.</p>

<p>In line with the <a href="https://facebook.github.io/react/docs/tutorial.html">React tutorial</a>, we first broke up our UI into functional and visual components. For each component we found the relevant HAML template, converted it into <a href="https://facebook.github.io/react/docs/jsx-in-depth.html">jsx</a> and React components using dummy data, and eventually updated it to accept the correct state from our top-level component which did all of the dynamic fetching and saving. Then we deleted the associated HAML and CoffeeScript code.</p>

<h3>Thinking the React Way</h3>

<p>At this point we have replaced the majority of the app&#8217;s front-end with React components. We love React because it encourages you to follow certain <a href="http://www.reactivemanifesto.org/">ideological conventions</a>, but it does not force you into a structure that may not exactly align with your goals.</p>

<p>In React, having a single source of truth is ideal. Gone are liberally distributed global event listeners that can conflict and cause pages to get bogged down with transition logic. State is held at the topmost level in React and when state changes, React automatically re-renders only the affected components.</p>

<p>For example, we hold a hash <code>artworks</code> in the highest-level state of the page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">artworks</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork_ids</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">_id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">isLoaded</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">isSelected</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">isMinimized</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">artworks</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">object</span><span class="p">(</span><span class="nx">artworks</span><span class="p">),</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also store a method at this level to update the <code>artworks</code> state when there is a change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">updateArtwork</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artwork_id</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// finds an artwork, passes it to callback (cb) to be mutated,</span>
</span><span class='line'>  <span class="c1">// sets the mutated artwork on state from the return value of</span>
</span><span class='line'>  <span class="c1">// the callback</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">new_artwork</span> <span class="o">=</span> <span class="nx">cb</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">artworks</span><span class="p">[</span><span class="nx">artwork_id</span><span class="p">]);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">state_copy</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">state_copy</span><span class="p">.</span><span class="nx">artworks</span><span class="p">[</span><span class="nx">artwork_id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">new_artwork</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">state_copy</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>That method is passed to child components, and when there is an update to an <code>artwork</code>, such as when it becomes selected, we invoke it to update all affected components:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">changeIsSelected</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">newSelectedState</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">isSelected</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">updateArtwork</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artwork</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">artwork</span><span class="p">.</span><span class="nx">isSelected</span> <span class="o">=</span> <span class="nx">newSelectedState</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">artwork</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>React lets us define our components and interactions in a declarative style instead of stringing together possible transitions triggered by events. Before converting this app to React, we had many bugs around form submission and saving genome progress. However, by modeling state instead of UI transitions, we can easily track changes and save progress incrementally in the background without requiring a page refresh from the user.</p>

<h4>From CoffeeScript to React: Selecting Artworks</h4>

<p>In this app, genomers are able to &#8216;select&#8217; artworks on the panel for the purposes of saving and conducting batch actions. In our initial implementation, clicking the &#8216;select all&#8217; button would individually click each artwork and used global event listeners to change UI state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="nx">$</span> <span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;.artwork-selector&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">container</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">currentSlug</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">artworkIdsElement</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#selected_artwork_ids&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">selectedArtworkIds</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">compact</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">uniq</span><span class="p">(</span><span class="nx">artworkIdsElement</span><span class="p">.</span><span class="nx">val</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)))</span>
</span><span class='line'>  <span class="nx">indexOfCurrentSlug</span> <span class="o">=</span> <span class="nx">selectedArtworkIds</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">currentSlug</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">selectedArtworkIds</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">currentSlug</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="nx">selectedArtworkIds</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">indexOfCurrentSlug</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Not selected&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;btn-purple&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nx">selectedArtworkIds</span><span class="p">.</span><span class="nx">push</span> <span class="nx">currentSlug</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Selected&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;btn-purple&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#selected_artwork_ids&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">selectedArtworkIds</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>With React, we store whether or not an artwork is selected as part of our state, and the appearance of elements results from this variable. We use <a href="https://facebook.github.io/react/docs/class-name-manipulation.html">class sets</a> to dynamically alter styles such as button color. When the <code>selected</code> state changes, React re-renders all components that depend on that variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">SelectedButton</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">changeIsSelected</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">newSelectedState</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">isSelected</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">updateArtwork</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artwork</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">artwork</span><span class="p">.</span><span class="nx">isSelected</span> <span class="o">=</span> <span class="nx">newSelectedState</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">artwork</span><span class="p">;</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cx</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">classSet</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">selectedButtonClasses</span> <span class="o">=</span> <span class="nx">cx</span><span class="p">({</span>
</span><span class='line'>      <span class="s1">&#39;btn-purple&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">isSelected</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;btn-tiny&#39;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;btn&#39;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;artwork-selector&#39;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;panel-artwork-actions&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">selectedButtonClasses</span><span class="p">}</span>
</span><span class='line'>           <span class="nx">data</span><span class="o">-</span><span class="nx">id</span><span class="o">=</span><span class="s1">&#39;false&#39;</span>
</span><span class='line'>           <span class="nx">href</span><span class="o">=</span><span class="s1">&#39;#&#39;</span>
</span><span class='line'>           <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">changeIsSelected</span> <span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">isSelected</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="o">:</span> <span class="s1">&#39;Not &#39;</span><span class="p">}</span><span class="nx">Selected</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Challenges</h3>

<h4>React&#8217;s Virtual DOM</h4>

<p>React keeps track of a Virtual DOM created by components you define. This can lead to issues, especially when trying to integrate React with jQuery plugins. For example, our modals kept showing up within other components until we explicitly rendered them on the outermost level. We also had issues trying to use an existing drag/drop plugin with the way we set up our state, and ended up <a href="https://gist.github.com/sweir27/4ea941dd717da69527d6">building one from scratch</a>.</p>

<p>React also crashes when the Virtual DOM becomes out-of-sync with the page DOM. We unearthed a mysterious bug in which the browser was automatically inserting a <code>tbody</code> tag when it saw a table rendered without one&#8230; causing React (and therefore our entire app) to crash. In order to rectify this, we had to explicitly include these normally optional tags:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">geneList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">table</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;triple-margin-top&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                   <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">DictionaryView</span><span class="p">.</span><span class="nx">header</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/thead&gt;</span>
</span><span class='line'>                   <span class="o">&lt;</span><span class="nx">tbody</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">geneList</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/tbody&gt;</span>
</span><span class='line'>                 <span class="o">&lt;</span><span class="err">/table&gt;);</span>
</span><span class='line'> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Working with the React Lifecycle</h4>

<p>Sometimes it is unavoidable to model transitions directly with JavaScript/jQuery, instead of using React&#8217;s built-in lifecycle methods. In one case, we had to dynamically change the top padding of a component based on the height of a different one. Although we tried to do this using the <a href="https://facebook.github.io/react/docs/component-specs.html">React lifecycle</a> methods, there ended up being too many edge cases and we were having to add more and more states just to avoid:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">currentTemplateHeight</span><span class="o">=</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.panel-template-wrap&#39;</span><span class="p">).</span><span class="nx">height</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.panel-data-items&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;padding-top&#39;</span><span class="p">,</span> <span class="nx">currentTemplateHeight</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, we found it more straightforward to go with the jQuery solution.</p>

<h3>React == Refactor</h3>

<p>When we started out converting the app to React, it was hard to know whether or not an element should be its own component or if it could exist within another one. Often when we add new features, we have to refactor to make sure that we are reusing components and maintaining a single source of truth.</p>

<p>For example, we originally had one component to hold metadata on an artwork, such as artist, title, and date:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">PanelArtworkInfo</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artistName</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artworkTitle</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artworkDate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">artist</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">artistName</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">ArtistName</span> <span class="nx">artwork</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">}</span> <span class="nx">setTemplateArtistId</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setTemplateArtistId</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">artistName</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="nx">Unattributed</span><span class="o">&lt;</span><span class="err">/span&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">artworkTitle</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">title</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">title</span> <span class="o">:</span> <span class="s1">&#39;Untitled&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">artworkDate</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">date</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">date</span> <span class="o">:</span> <span class="s1">&#39;No Date&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;dummy-wrap&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;col-sm-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;artist-name&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="p">{</span><span class="nx">artistName</span><span class="p">}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="p">{</span><span class="nx">artworkTitle</span><span class="p">}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;date&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="p">{</span><span class="nx">artworkDate</span><span class="p">}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we implemented a new &#8216;minimized&#8217; view for artworks, we also showed the title and artist, and so we broke these bits of information into separate components:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ArtistName</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">handleClick</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setTemplateArtistId</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;_id&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artistName</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">artist</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">artistName</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;artist-as-template-link&quot;</span>
</span><span class='line'>                      <span class="nx">data</span><span class="o">-</span><span class="nx">template</span><span class="o">-</span><span class="nx">id</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;_id&#39;</span><span class="p">]}</span>
</span><span class='line'>                      <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">}</span>
</span><span class='line'>                      <span class="nx">data</span><span class="o">-</span><span class="nx">template</span><span class="o">-</span><span class="nx">type</span><span class="o">=</span><span class="s2">&quot;Artist&quot;</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">artist</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]}</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="err">/a&gt;;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">[</span><span class="s1">&#39;cultural_maker&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">artistName</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">[</span><span class="s1">&#39;cultural_maker&#39;</span><span class="p">]}</span><span class="o">&lt;</span><span class="err">/span&gt;;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">artistName</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="nx">Unattributed</span><span class="o">&lt;</span><span class="err">/span&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;artist-name&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">artistName</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ArtworkTitle</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artworkTitle</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">title</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">title</span> <span class="o">:</span> <span class="s1">&#39;Untitled&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">artworkTitle</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ArtworkDate</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artworkDate</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">date</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">.</span><span class="nx">date</span> <span class="o">:</span> <span class="s1">&#39;No Date&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;date&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">artworkDate</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And updated our parent to reuse the new child components:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">PanelArtworkInfo</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;dummy-wrap&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;col-sm-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">ArtistName</span> <span class="nx">artwork</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">}</span> <span class="nx">setTemplateArtistId</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">setTemplateArtistId</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">ArtworkTitle</span> <span class="nx">artwork</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">ArtworkDate</span> <span class="nx">artwork</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">artwork</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Writing Specs</h3>

<p>All of the existing specs for the app were written in RSpec, so we chose to write integration tests using RSpec+Capybara. The headless Capybara webkit did not integrate with our React setup, so we switched to using Selenium as our Capybara JavaScript driver (which also conveniently let us debug our specs within the browser).</p>

<p>Our main challenge with specs had to do with RSpec not waiting long enough for components (such as autocomplete results) to appear, perhaps due to React&#8217;s Virtual DOM. We spent many sad hours debugging spurious tests, and even included a few dreaded &#8216;sleep&#8217; commands. Eventually, we integrated the <a href="https://github.com/y310/rspec-retry">rspec-retry</a> gem to retry spurious tests during CI.</p>

<h3>Conclusion</h3>

<p>Converting our app to use a React-based front-end went surprisingly smoothly. We were able to incrementally change certain templates to React components, which made it easy to test as we went along. Additionally, our development time in adding new features since then has decreased dramatically. It is much easier to add new components or edit existing ones when there is a single source of truth and you don&#8217;t have to search through global event listeners.</p>

<p>Choosing a front-end framework is non-trivial but incredibly important, and we are glad we found React. Because it does not require much overhead and it is possible to only use it on a portion of a page, React can be integrated into small or large projects. Although we deliberated for a long time over whether or not to use a framework, we never regretted moving to React and investing in the future of the app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artsy's Engineering Compensation Framework]]></title>
    <link href="http://artsy.github.io/blog/2015/04/03/artsy-engineering-compensation-framework/"/>
    <updated>2015-04-03T00:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/04/03/artsy-engineering-compensation-framework</id>
    <content type="html"><![CDATA[<p>Fair compensation is an important part of cultivating and growing engineers, and determining how much money someone is going to make is often more art than science, especially in young start-ups. We wanted this to be a collaborative process and not an adversarial one, and as our engineering team grew past 20 members it became important to think about compensation more systematically.</p>

<p>In this post I will share our individual contributor engineering ladder and our performance evaluation and compensation process.</p>

<!-- more -->


<p>Performance evaluation at Artsy is composed of the <em>what</em>, i.e. what you achieve that contributes to your team’s goals and ultimately Artsy goals, and the <em>how</em>, i.e. how you act and how those actions  contribute to Artsy’s culture and values. The <em>what</em> part for an engineer is expressed in our individual contributor ladder, which describes typical growth from someone who has recently graduated, to an inspiring technologist. There&#8217;s nothing typical to engineering in our team - we have more art degrees than computer science ones, and I find all our junior engineers incredibly inspiring. This ladder is a benchmark, not a formula - knowing what&#8217;s typical helps team leads highlight the exceptional achievements and individuals to find themselves in a traditional growth path and figure out what their next step could be. It&#8217;s also important to note that our ladder recognizes that individual contributors do not need to become team leads to make more money - individual contributors are the most important people at Artsy and there&#8217;s no ceiling in their career here. We also are working on a company-wide system for team leads, but that&#8217;s a subject for another post.</p>

<p>We have devised 5 levels, much inspired by the excellent <a href="http://dresscode.renttherunway.com/blog/ladder">Rent-the-Runway&#8217;s Engineering Ladder</a>. You&#8217;ll find it at the end of this article.</p>

<p>Armed with this list a team lead can have a good 1:1 conversation with a team member about where they are in their career in terms of pure performance, and what areas need be paid attention to in order to grow into the next level. Leads can also compare engineers that don&#8217;t work on their teams using a consistent vocabulary.</p>

<p>In parallel with working on this ladder, we did a lot of research regarding market compensation for Engineers. We routinely ask candidates questions about their pay and competitive offers, discuss this with  heads of engineering in other companies, use market data from large recruiting firms and pay attention to polls in the various technology organizations. We understand regional differences and have a good idea of the ranges that a company similar to Artsy pays individuals and constantly update our knowledge. If you run a team and would like to compare your numbers to ours, please e-mail <a href='mailto:db@artsy.net'>db@artsy.net</a>.</p>

<p>A significant portion of your compensation comes in Artsy stock options. However, we do not assign dollar value to those or consider them to do compensation math, other than for the case when we offer you a range of possible salaries and a range of possible stock compensation. We often let you choose high equity and low cash, or low equity and high cash, which shifts down or up your target market value by the difference in dollars between your choice and fair market compensation. We determine the amount of stock options at the time of your joining and you may also receive subsequent grants with the goal of always providing you a fair amount of stock appropriate to your ladder at the moment of the grant.</p>

<p>We review compensation every six months. And so, how do we determine your actual pay? We identify your ladder level, which yields your fair market value. Your lead then considers how you act and how those actions contribute to Artsy’s culture and values. This determines whether you are paid an amount that&#8217;s market high, or maybe even above market, creating a good margin to work with for exceptional achievements, strong progress or impact outside of your primary responsibilities.</p>

<p>We test our framework when making new offers by asking candidates what their compensation expectations are. Some will give a number above their fair market value and we&#8217;ll offer them less. Some will give a number below their fair market value and we&#8217;ll offer them more. You read that right - people are paramount at Artsy - we do make offers above what a candidate may be asking for, based on our data and compensation framework. But don&#8217;t take our word for it, e-mail us your resume to <a href='jobs@artsy.net'>jobs@artsy.net</a>.</p>

<h3>Individual Contributor Ladder</h3>

<h4>Engineer 1</h4>

<ul>
<li>Broad knowledge of CS concepts.</li>
<li>Can complete well-defined and sub-divided tasks.</li>
<li>Focuses on learning tools and processes.</li>
<li>Pushes code through the entire lifecycle from development to production for the first time.</li>
<li>Develops individual contributor skills, including source control, editors or test-driven development.</li>
</ul>


<h4>Engineer 2</h4>

<ul>
<li>Consistently writes and delivers correct and clean quality code with guidance.</li>
<li>Self-sufficient and makes steady progress on tasks.</li>
<li>Knows when to ask for help and how to get unblocked.</li>
<li>Makes steady, well-paced progress without the need for constant significant feedback from more senior engineers.</li>
<li>Owns a small-to-medium feature from technical design through completion.</li>
<li>Provides help and support outside of area under their responsibility.</li>
</ul>


<h4>Engineer 3</h4>

<ul>
<li>Owns a service or large technology component.</li>
<li>Requires minimal direction or oversight, delivers quickly.</li>
<li>Understands elements of the business that their work supports.</li>
<li>Understands and makes well-reasoned design decisions and tradeoffs in their area.</li>
<li>Works in other areas of the codebase with guidance from owners of that system.</li>
<li>Persistent in the face of roadblocks, dispatches them efficiently, pulling in others as necessary.</li>
<li>Has end-to-end responsibility on projects of increasing complexity and contributes to code shared across projects.</li>
<li>Mentors junior engineers.</li>
<li>Participates in the interviewing process of new team members.</li>
<li>Demonstrates knowledge of industry trends, infrastructure and systems.</li>
</ul>


<h4>Engineer 4</h4>

<ul>
<li>Owns large scale and impact service or collection of services.</li>
<li>Understands the Artsy business and makes decisions based on its direction.</li>
<li>Sought out by other team members for technical guidance.</li>
<li>Anticipates technical issues at the product level and makes architectural and design decisions to avoid them.</li>
<li>Recognized as a prolific contributor to core and side projects.</li>
<li>Multiplies the effectiveness of others by facilitating cross-team work.</li>
<li>Has track record of creating sweeping improvements in stability, performance, and scalability across services.</li>
<li>Consistently reduces the complexity of projects, services, and processes in order to get more done with less work.</li>
<li>Has made an obvious positive impact on the entire company&#8217;s technical trajectory.</li>
<li>Sets short to medium-term strategic technical direction.</li>
<li>Communicates the awesomeness of Artsy technology externally via talks and blog posts.</li>
</ul>


<h4>Engineer 5</h4>

<ul>
<li>Inspires engineers and is seen as a role model and mentor to every technical member of the team.</li>
<li>Plays a key role in developing multi-year technology strategy for complete and critical areas of the business.</li>
<li>Has organization-wide impact on architecture and technology solutions.</li>
<li>Anticipates broad technical change and ensures Artsy is always ahead of the curve.</li>
<li>Consistently delivers large systems involving one or more teams&#8217; contribution.</li>
<li>Primarily acts as a multiplier by building systems, authoring tools, or introducing policies or patterns.</li>
<li>Quickly breaks down complex problems into potential solutions, knowns, and unknowns.</li>
<li>Creates architecture that enables many potential futures without knowing exactly what the future is.</li>
<li>Leads the conversations internally about the direction of major areas of the technology.</li>
<li>Identifies technology strategic growth opportunities that enable Artsy to grow as a business.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Culture of Openness in the Artsy Mobile Team]]></title>
    <link href="http://artsy.github.io/blog/2015/03/31/the-culture-of-openness-artsy-mobile/"/>
    <updated>2015-03-31T19:07:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/03/31/the-culture-of-openness-artsy-mobile</id>
    <content type="html"><![CDATA[<p>Recently, the Artsy Mobile team had the pleasure of working together on <a href="http://www.objc.io/issue-22/artsy.html">an article</a> for <a href="http://www.objc.io">objc.io</a>, an online publication dedicated to in-depth articles about iOS and OS X development. Each monthly issue consists of several articles centered around a theme—past issues include <a href="http://www.objc.io/issue-15/">Testing</a>, <a href="http://www.objc.io/issue-12/">Animations</a> and <a href="http://www.objc.io/issue-16/">Swift</a>. objc.io’s latest issue, <a href="http://www.objc.io/issue-22">iOS at Scale</a>, features articles by a handful of developers about how they approach iOS development at their respective companies. Our contribution to the issue is a collaboratively-written article by and about Artsy’s Mobile team from the angle of Artsy&#8217;s focus on the core value of openness that is foundational to how we (and the greater Artsy team) work.</p>

<p>As our article puts it:</p>

<blockquote><p>Our team intrinsically believes in the ideas of open source. Though our individual motivations vary — from a conviction in the power of education to a determination to help others see from giants’ shoulders — we all maintain the value of open source.</p></blockquote>

<p>iOS at Artsy is characterized by a culture of open source stewardship. Although our team is small, our contributions to the Cocoa developer community are significant. We hope our article sheds some light on our development and testing practices while also providing a high-level look into our team’s philosophy. If you’d like to learn more, feel free to reach out to us at <a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#x6d;&#x6f;&#x62;&#105;&#108;&#x65;&#x40;&#x61;&#x72;&#x74;&#x73;&#121;&#x2e;&#110;&#x65;&#116;">&#109;&#x6f;&#x62;&#x69;&#x6c;&#101;&#64;&#97;&#x72;&#116;&#115;&#121;&#46;&#110;&#x65;&#x74;</a> or <a href="https://twitter.com/artsyopensource">@ArtsyOpenSource</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artsy's Technology Stack, 2015]]></title>
    <link href="http://artsy.github.io/blog/2015/03/23/artsy-technology-stack-2015/"/>
    <updated>2015-03-23T00:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2015/03/23/artsy-technology-stack-2015</id>
    <content type="html"><![CDATA[<p>Artsy has now grown past 100 team members and our Engineering organization is now 20 strong. For a brief overview of what the company has accomplished in the last two years, check out our <a href="http://2013.artsy.net">2013</a> and <a href="http://2014.artsy.net">2014</a> reviews.</p>

<p>This is a good opportunity to describe our updated technology stack. Last time <a href="http://artsy.github.io/blog/2012/10/10/artsy-technology-stack">we did this</a> was when Artsy launched publicly in 2012.</p>

<center><img src='http://artsy.github.io/images/2015-03-23-artsy-technology-stack-2015/stats.png'></center>


<p>Three years ago Artsy was a classic <a href="http://rubyonrails.org">Ruby-on-Rails</a> monolith with a handful of adjacent processes and tools. We&#8217;ve since broken it up into many independent services, and continue to heavily be a Ruby and JavaScript shop, using Rails where appropriate, with native code on mobile devices and some JVM-based experiments in micro-services.</p>

<center><img src='http://artsy.github.io/images/2015-03-23-artsy-technology-stack-2015/languages.png'></center>




<!-- more -->


<p>What you see today when you go to <a href="https://www.artsy.net">www.artsy.net</a> is a website built with <a href="http://ezeljs.com">Ezel.js</a>, which is a boilerplate for <a href="http://backbonejs.org">Backbone</a> projects running on <a href="https://nodejs.org">Node</a> and using <a href="http://expressjs.com">Express</a> and <a href="http://browserify.org">Browserify</a>. The <a href="https://github.com/artsy/force-public">CoffeeScript code</a> is open-source. The mobile version of www.artsy.net is <a href="https://m.artsy.net">m.artsy.net</a> and is built on the same technology. Both run on <a href="http://heroku.com">Heroku</a> and use <a href="http://redis.io">Redis</a> for caching. Assets, including artwork images, are served from <a href="http://aws.amazon.com/s3/">Amazon S3</a> via the <a href="http://aws.amazon.com/cloudfront">CloudFront CDN</a>.</p>

<center><img src='http://artsy.github.io/images/2015-03-23-artsy-technology-stack-2015/artsy.png'></center>


<p>These web applications talk to a private Ruby API built with <a href="https://github.com/intridea/grape">Grape</a>, that serves JSON. We also have a more modern and better designed <a href="https://developers.artsy.net">public HAL+JSON API</a>. For historical reasons, both are hosted side-by-side on top of a big Rails app that used to be our original monolith. The API service runs on <a href="http://aws.amazon.com/opsworks">AWS OpsWorks</a> and retrieves data from several <a href="http://www.mongodb.com">MongoDB</a> databases hosted with <a href="https://www.compose.io">Compose</a>. It also uses <a href="http://lucene.apache.org/solr">Apache Solr</a>, <a href="https://www.elastic.co">Elastic Search</a> and <a href="https://www.google.com/cse">Google Custom Search</a>. The API service also heavily relies on <a href="http://memcached.org">Memcached</a>.</p>

<center><img src='http://artsy.github.io/images/2015-03-23-artsy-technology-stack-2015/developers.png'></center>


<p>Our partners upload artworks, artists and other metadata via a home-grown content-management system built entirely from scratch in 2014 on Ruby-on-Rails. This was a deliberate <a href="http://chris.eidhof.nl/posts/boring-choice.html">&#8220;boring&#8221;</a> choice that continues to serve us very well. We have adopted a common model for admin-type apps with a shared component library and a reusable UI, all implemented as Rails engines. Using these components we are able to quickly and easily compose beautiful and useful applications - we have built dedicated systems to manage fairs and auctions. We standardized on related services as well - for example, our customers interact with us via <a href="https://www.intercom.io">Intercom</a>. We&#8217;re also experimenting with some new technologies in our internal apps, notably <a href="http://facebook.github.io/react">React</a>.</p>

<center><img src='http://artsy.github.io/images/2015-03-23-artsy-technology-stack-2015/cms.png'></center>


<p>Our family of mobile applications includes <a href="http://iphone.artsy.net">Artsy for iOS</a>, which is a hybrid app written in Objective-C, and a <a href="https://github.com/artsy/eidolon">bidding kiosk</a>, written in Swift. Both are open-source <a href="https://github.com/artsy/eigen">here</a> and <a href="https://github.com/artsy/eidolon">here</a>.</p>

<center><img src='http://artsy.github.io/images/2015-03-23-artsy-technology-stack-2015/folio.jpg'></center>


<p>A lot of data, including the artwork similarity graph that powers The Art Genome Project, is processed offline by a generic job engine, written in Ruby or by <a href="http://aws.amazon.com/elasticmapreduce">Amazon Elastic MapReduce</a>. We take data snapshots from MongoDB, run jobs on the data and export data back to the database. Other recently rewritten services include image processing, which creates thumbnails, image tiles for deep zoom and watermarks high quality JPEGs. Several new applications use <a href="http://www.postgresql.org">PostgreSQL</a>.</p>

<p>Various front-ends pipe data to <a href="https://github.com/snowplow/snowplow">Snowplow</a> and <a href="https://segment.com">Segment</a>, which forwards events to <a href="https://keen.io">Keen</a>, <a href="http://www.google.com/analytics">Google Analytics</a>, <a href="https://mixpanel.com">MixPanel</a> and <a href="https://chartbeat.com">ChartBeat</a>. Some data is warehoused in <a href="http://aws.amazon.com/redshift">AWS Redshift</a> and <a href="http://www.postgresql.org">PostgreSQL</a> and may be analyzed offline using <a href="http://www.r-project.org">R</a> or <a href="http://ipython.org/notebook.html">iPython Notebooks</a>. We also have a <a href="https://github.com/etsy/statsd">Statsd</a> and <a href="http://graphite.wikidot.com">Graphite</a> system for tracking high volume, low-level counters. Finally, it&#8217;s also fairly common to find a non-Engineer at Artsy in a read-only Rails console or in Redshift directly querying data.</p>

<p>We send millions of e-mails via <a href="http://sendgrid.com/">SendGrid</a> and <a href="https://mandrill.com">Mandrill</a> and use <a href="http://mailchimp.com">MailChimp</a> for manual campaigns.</p>

<p>Smaller systems usually start on <a href="https://dashboard.heroku.com">Heroku</a> and larger processes that perform heavier workloads usually end up on <a href="http://aws.amazon.com/opsworks">AWS OpsWorks</a>. Our systems are monitored by a combination of <a href="http://newrelic.com/">New Relic</a> and <a href="https://www.pingdom.com">Pingdom</a>. All of this is built, tested and continuously deployed with <a href="http://jenkins-ci.org">Jenkins</a>, <a href="https://semaphoreci.com">Semaphore</a>, and <a href="https://travis-ci.org">Travis-CI</a>.</p>

<center><img src='http://artsy.github.io/images/2015-03-23-artsy-technology-stack-2015/gravity.png'></center>


<p>In terms of Engineering workflow we live in <a href="https://github.com">Github</a> and <a href="https://trello.com">Trello</a>. We tend to have a workflow similar to open-source projects with individuals owning components and services and the entire team contributing to them.</p>

<p>In 2015 we intend to complete our transformation into small independent services built with 10x growth in mind. We can then focus on maturing the Artsy platform both vertically and horizontally and enabling many new directions for our thriving businesses.</p>

<p>We hope you find this useful and will be happy to describe any detailed aspect of our system on this blog. We&#8217;re always hiring, please e-mail <a href='mailto:jobs@artsy.net'>jobs@artsy.net</a> if you want to work with us. Finally, we welcome any questions here and look forward to answering them below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods-Keys and CI]]></title>
    <link href="http://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI/"/>
    <updated>2015-01-21T16:43:00-05:00</updated>
    <id>http://artsy.github.io/blog/2015/01/21/cocoapods-keys-and-CI</id>
    <content type="html"><![CDATA[<p>We built CocoaPods-Keys as a way to remove API keys and secrets from our source code. We use it to open up our code to the pubic, without leaking private details. One of the cool things about doing it this way was that we could all use different API keys stashed away in each developers Keychain.</p>

<p>To ensure we could run CI on our apps we came up with two different ways to use keys on CI. This post explains them both.</p>

<!-- more -->


<h2>The easy way.</h2>

<p>Depending on your use-case, you may not need to use the keys at all in your testing. This works really well if you&#8217;re using stubbed network requests. So if you have a keys definition in your <a href="https://github.com/artsy/eidolon/blob/9a918108e717a68a45709345f38d55e0eeb1f8b3/Podfile#L4-L21">Podfile</a> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">plugin</span> <span class="s1">&#39;cocoapods-keys&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:project</span> <span class="o">=&gt;</span> <span class="s2">&quot;Eidolon&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:target</span> <span class="o">=&gt;</span> <span class="s2">&quot;Kiosk&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:keys</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;ArtsyAPIClientSecret&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;ArtsyAPIClientKey&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before the CI runs <code>pod install</code> you will want ensure you have already set the keys to be dummy data. So in either your <code>install:</code> or <code>before_install:</code> add commands like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">pod</span> <span class="n">keys</span> <span class="n">set</span> <span class="no">ArtsyAPIClientSecret</span> <span class="s2">&quot;-&quot;</span> <span class="no">Eidolon</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">pod</span> <span class="n">keys</span> <span class="n">set</span> <span class="no">ArtsyAPIClientKey</span> <span class="s2">&quot;-&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will set up the keys beforehand with the right target name.</p>

<h2>The fully featured way</h2>

<p>If you need to have full access to an API with secret keys, we recommend using the CI&#8217;s private environment keys feature. You can see the technique being used here in Eidolon, starting on <a href="https://github.com/artsy/eidolon/blob/master/.travis.yml#L5">line 5</a> we declare a secure environment key <code>GITHUB_API_KEY</code> in that hash. Then it is used on <a href="https://github.com/artsy/eidolon/blob/aa8e8447f797c483ff72148d124d2930b58a42e7/.travis.yml#L8">line 8</a> to set up our <code>~/.netrc</code>.</p>

<p>To get started on Travis CI you will need to install the travis gem, and go through the <a href="http://docs.travis-ci.com/user/environment-variables/">Environment Variables</a> section of their documentation. Notably the <a href="http://docs.travis-ci.com/user/environment-variables/#Secure-Variables">Secure Variables</a> section. In a gist, you run <code>travis encrypt ARTSYAPICLIENTSECRET=super_secret_yo</code> and it gives you the secure string.</p>

<p>You can then use the new keys in your <code>before:</code> section:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">pod</span> <span class="n">keys</span> <span class="n">set</span> <span class="no">ArtsyAPIClientSecret</span> <span class="vg">$ARTSYAPICLIENTSECRET</span> <span class="no">Eidolon</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">pod</span> <span class="n">keys</span> <span class="n">set</span> <span class="no">ArtsyAPIClientKey</span> <span class="vg">$ARTSYAPICLIENTKEY</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s a wrap. We don&#8217;t use the second technique in any OSS repos, though there is talk of doing it on our <a href="https://github.com/artsy/Artsy_Authentication/">Artsy Authentication</a> pod. So if you&#8217;re in my future 👋, maybe give that a look over as an example of the latter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods and Frameworks]]></title>
    <link href="http://artsy.github.io/blog/2015/01/04/cocoapods-and-frameworks/"/>
    <updated>2015-01-04T16:43:00-05:00</updated>
    <id>http://artsy.github.io/blog/2015/01/04/cocoapods-and-frameworks</id>
    <content type="html"><![CDATA[<p>As I mentioned in my <a href="https://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">retrospective on Eidolon</a>, Artsy iOS codebases are often used as testbeds for new CocoaPods features. With Eidolon, we had the opportunity to try out CocoaPods&#8217; support for frameworks and Swift. This post is a look back at the month of using dependencies as dynamic frameworks instead of static libraries.</p>

<!-- more -->


<p>Updating was pretty easy: we used a <code>Gemfile</code> and <code>bundler</code> to specify a pre-release version of CocoaPods, as well as pre-release versions of its dependencies. (Updating now is easy – just run <code>[sudo] gem install cocoapods --prerelease</code> to grab the latest beta.)</p>

<p>After updating to CocoaPods, all of our existing code had to be migrated. Previously, we could import all the frameworks we used in the bridging header and they would be accessible to all of our Swift files. <a href="https://github.com/orta/eidolon/commit/abc359c55d4322d21d88349fbd044bf5b5f04725">This commit</a> is an example of having to add <code>import Moya</code> statements all throughout our Swift files that needed to access that library.</p>

<p>One by one, we created podspecs for libraries we were using. Then we would push the podspecs to a fork of that library. By specifying in our Podfile which repository CocoaPods should fetch the code from, we were able to use our own podspecs without bothering the library authors themselves. Some libraries did <a href="https://github.com/Quick/Quick/pull/197">accepted pull requests</a> to add the podspecs from us.</p>

<p>The final step to update was getting our tests to pass. Up to this point, we had added all of our classes to both the app target <em>and</em> the test target. The helpful upshot of this is that all of the test were able to access the Swift classes without us having had declared those classes <code>public</code>. Swift classes are <code>internal</code> by default, so separating out the app code from the test target required <a href="https://github.com/orta/eidolon/pull/4">quite a few</a> tedious changes throughout our codebase.</p>

<p><img src="http://artsy.github.io/images/2015-01-04-cocoapods-and-frameworks/levelup.gif" alt="Level up." /></p>

<p>Eidolon is pretty distinct among iOS applications: from day one, it was developed completely in the open. Developing this kind of app in the open posed some new challenges, including limiting access to fonts for which we have licenses to use but not to distribute. Orta <a href="http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/">solved this problem</a> earlier this year by having two pods: one private, and one public, but with identical header files. When installing the dependencies, CocoaPods uses one pod or the other depending on a <a href="https://github.com/artsy/eidolon/blob/4ae52f166f2d1620f25a59f36e6a87915ba32705/Podfile#L31-L35">complex heuristic</a>. However, the names of the pods are used as names for the Swift modules generated from them. Since the pods have different names, the <code>import Artsy_UIFonts</code> statements won&#8217;t make sense if someone only has access to the <code>Artsy_OSSUIFonts</code> module. Swift&#8217;s lack of a preprocessor led to some <a href="https://github.com/artsy/eidolon/commit/57aa66681727cfed11239f9b5a62bb59fee35f1a">hacks</a>. However, CocoaPods now allows you to specify a module name for a pod, so we&#8217;ll be fixing the issue <a href="https://github.com/artsy/Artsy-OSSUIFonts/issues/1">shortly</a>.</p>

<p>Of course, Swift still has some rough edges, too. Namely, we can&#8217;t compile our app with compiler optimizations enabled – the compiler will segfault. It turns out that one of our dependencies was causing the segfault – probably just a Swift compiler bug, but we needed a workaround until it&#8217;s fixed. I got more familiar with post-install hooks when I dipped my toes into Ruby to <a href="https://github.com/ashfurrow/cocoapods-chillax-swift">disable the optimization on specific pods</a>.</p>

<p>Orta used the opportunity of using a prerelease version of CocoaPods to help define the new <code>plugin</code> syntax in the <a href="https://github.com/artsy/eidolon/commit/cdc8dde011e98878a7dde646d0da75c34c8fd5a9#diff-4a25b996826623c4a3a4910f47f10c30">Podfile</a>.</p>

<p>One issue that Marius covered in the <a href="http://blog.cocoapods.org/Pod-Authors-Guide-to-CocoaPods-Frameworks/">CocoaPods blog post</a> is that of bundles. Since a framework is a separate bundle from the app (as opposed to a static library, which is in the same bundle), code that relies on <code>[NSBundle mainBundle]</code> isn&#8217;t going to behave correctly in a framework. An unexpected problem we encountered related to bundles was our use of custom fonts. For Eidolon, our fonts reside in a CocoaPod and, therefore, now in a framework. That means that the font files aren&#8217;t in our app&#8217;s bundle anymore and <code>UIFont</code>&#8217;s <code>fontWithName:</code> wasn&#8217;t finding those font files, regardless our use of the <code>UIAppFonts</code> key in any info.plist file. Borrowing a <a href="https://github.com/CocoaPods-Fonts/OpenSans/blob/874e65bc21abe54284e195484d2259b2fe858680/UIFont%2BOpenSans.m#L18-L38">solution from OpenSans</a>, we were able to use CoreText to load the font manually.</p>

<p>Finally, we were done.</p>

<p><img src="http://artsy.github.io/images/2015-01-04-cocoapods-and-frameworks/success.gif" alt="Finally finished." /></p>

<p>Adopting CocoaPods with support for frameworks early helped us identify features and bug fixes that we could ask the CocoaPods developers for. Now, there is still time to let the team know what awesome feature you&#8217;d like to see included, but you&#8217;ll have to try the fancy new CocoaPods version in order to figure out what that feature is. Sure, CocoaPods 0.36 is still in beta, but since you&#8217;re already using a pre-1.0 dependency mananger, you&#8217;re probably cool with trying out awesome, cutting-edge stuff. Try the new release when you get a chance and <a href="https://github.com/CocoaPods/CocoaPods/issues/new">let the team know</a> if you have feedback.</p>

<p>Our path to using CocoaPods with frameworks was bumpy, but we were the first ones to try. Today, the process is a lot easier.</p>

<p>The CocoaPods team has a <a href="http://blog.cocoapods.org/Pod-Authors-Guide-to-CocoaPods-Frameworks/">wonderful guide</a> for library authors to adopt the new CocoaPods version, so we&#8217;ll likely see lots of new pods from open source Swift code, just like we already have with Objective-C.</p>

<p>A sincere thanks to <a href="http://twitter.com/mrackwitz">Marius</a> and everyone on the CocoaPods team for their dedicated work on the support for frameworks in CocoaPods.</p>

<p><img src="http://artsy.github.io/images/2015-01-04-cocoapods-and-frameworks/highfive.gif" alt="Great work, team." /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write Great Outage Post-Mortems]]></title>
    <link href="http://artsy.github.io/blog/2014/11/19/how-to-write-great-outage-post-mortems/"/>
    <updated>2014-11-19T12:21:00-05:00</updated>
    <id>http://artsy.github.io/blog/2014/11/19/how-to-write-great-outage-post-mortems</id>
    <content type="html"><![CDATA[<p>The website is finally back up after crashing hard for 4 hours straight.</p>

<p>Recently AWS decided to <a href="http://aws.amazon.com/blogs/aws/ec2-maintenance-update">reboot a few of your servers for a critical update</a>. It didn&#8217;t seem like it was going to be a big deal, except that the schedule was only accommodating if you were in the Pacific Northwest. The first reboot took out a secondary replica of our MongoDB database. Unfortunately <a href="https://github.com/mongoid/moped/issues/321">the driver handled that poorly</a> and spent the first 400ms of every subsequent HTTP request trying to reconnect to the missing instance. That server came back up, but failed to find its storage volumes because of a human mistake in a past migration and the alerts were mistakenly silenced by someone monitoring the system. A few hours later the primary was being stepped down and rebooted, sending the driver into panic over <a href="https://github.com/mongoid/moped/issues/323">another bug</a>. The site went down.</p>

<p>None of this was obvious while it was happening as the rate of automated alerts grew. Engineers communicated to the team that they are actively focusing on bringing the systems back up. This helped to fend off a large amount of instant messages, e-mails, texts and phone calls from various people on the team that were in the middle of demoing something to a very important prospective customer on the other side of the planet. It was also the middle of the night in New York.</p>

<p>Now that all the systems are back up, lets write a detailed outage post-mortem.</p>

<!-- more -->


<h2>Whose Job is It?</h2>

<p>In a small or medium-sized company, the most senior engineering manager, CTO, VP or Head of Engineering should be writing an outage post-mortem. It&#8217;s their job and responsibility to acknowledge, understand and explain what happened. Focusing attention away from the individual contributors allows the team to learn from the mistakes and address the root causes in time without the unnecessary stress or pressure during a crisis.</p>

<h2>Recipients</h2>

<p>The post-mortem audience includes customers, direct reports, peers, the company&#8217;s executive team and often investors. The e-mail may be published on your website, and otherwise goes to the entire team. It&#8217;s critical to bcc everyone. This is the equivalent of a locked thread, avoiding washing the laundry in public: one of the worst possible things to see is when a senior manager replies back pointing an individual who made a mistake, definitely not an email you want accidentally sent to the entire company.</p>

<p>I usually begin my e-mails with <em>Team (on the bcc), &#8230;</em>.</p>

<p>I also bcc myself and label the e-mail &#8220;Outages&#8221;, to be able to easily find the incident history next time around.</p>

<p><img src="http://artsy.github.io/images/2014-11-19-how-to-write-great-outage-post-mortems/header.png" alt="header" /></p>

<h2>Outage Email Subject</h2>

<p>Post-mortem subjects should include a date and a duration. This gets right to the point and offers a summary of the impact.</p>

<p><img src="http://artsy.github.io/images/2014-11-19-how-to-write-great-outage-post-mortems/subject.png" alt="subject" /></p>

<h2>Outage Summary</h2>

<p>The outage e-mail begins with a summary, a slightly expanded version of the subject line. Many people won&#8217;t read the details, so include graphs. These should tell the same story as the description of the outage. I use <a href="http://newrelic.com">NewRelic&#8217;s</a>.</p>

<p><img src="http://artsy.github.io/images/2014-11-19-how-to-write-great-outage-post-mortems/summary.png" alt="summary" /></p>

<h2>What Caused the Outage</h2>

<p>Explain what caused the outage on a timeline. Every incident begins with a specific trigger at a specific time, which often causes some unexpected behavior. For example, our servers were rebooted and we expected them to come back up intact, which didn&#8217;t happen. Furthermore, every incident has a root cause: the reboot itself was trigger, however a bug in the driver caused the actual outage. Finally, there&#8217;re consequences to every incident, the most obvious one is that the site goes down.</p>

<p><img src="http://artsy.github.io/images/2014-11-19-how-to-write-great-outage-post-mortems/cause.png" alt="cause" /></p>

<h2>How was the Outage Resolved</h2>

<p>Now that the timeline of the outage is established, we explain what actions took place to resolve it.</p>

<p><img src="http://artsy.github.io/images/2014-11-19-how-to-write-great-outage-post-mortems/resolution.png" alt="resolution" /></p>

<h2>The Post-Mortem</h2>

<p>The post-mortem answers the single most important question of what could have prevented the outage.</p>

<p><img src="http://artsy.github.io/images/2014-11-19-how-to-write-great-outage-post-mortems/post-mortem.png" alt="post-mortem" /></p>

<h2>Outage History</h2>

<p>To most humans that encounter bugs, it may seem like your systems have failures all the time. It&#8217;s important to educate everyone that an outage is much more than a bug and that it hopefully doesn&#8217;t happen frequently. Provide a history of outages, referencing the last one.</p>

<p><img src="http://artsy.github.io/images/2014-11-19-how-to-write-great-outage-post-mortems/history.png" alt="history" /></p>

<h2>Don&#8217;t Bury It</h2>

<p>A few final words. Despite how painful an outage may have been, the worst thing you can do is to bury it and never properly close the incident in a clear and transparent way. Most humans come together in times of crisis and communication around outage post-mortems, in my experience, has always been met with positive energy, understanding comments, constructive suggestions and numerous offers to help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Close to the Metal: Debugging Our Hardware Problem]]></title>
    <link href="http://artsy.github.io/blog/2014/11/18/debugging-our-hardware-problem/"/>
    <updated>2014-11-18T08:33:00-05:00</updated>
    <id>http://artsy.github.io/blog/2014/11/18/debugging-our-hardware-problem</id>
    <content type="html"><![CDATA[<p>For the past few months, Artsy’s mobile team has been working on <a href="https://github.com/artsy/eidolon">Eidolon</a>, a bidding kiosk for Artsy’s auctions platform. While we’ve written a <a href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/">retrospective</a> on the process of making Eidolon from the software side of things, we didn’t really touch on how our software is being used.</p>

<!-- more -->


<p>For typical iOS applications, you create an archive with Xcode and send it to users via the Internet. Maybe it’s an App Store release that goes to Apple before being downloaded by your users. Maybe it’s a beta release that goes to <a href="http://hockeyapp.net/">Hockey</a> before being downloaded by your users. Maybe it’s an enterprise build that goes to your own servers before being downloaded by your users. In any case, there is one thing in common: your users download the software themselves and run it on their own devices.</p>

<p>Eidolon is different. We develop the software and package it using enterprise distribution and use Hockey to download it to our own iPads. These iPads are managed by the Artsy auctions team at events; they are housed in these nifty little stands which hold the iPad in place and also allow room for the credit card readers.</p>

<p><img src="http://artsy.github.io/images/2014-11-18-debugging-our-hardware-problem/first_auction.jpg" alt="Eidolon at our first auction" /></p>

<p>At our first auction, everything went great – no major glitches or crashes. Awesome!</p>

<p>A few weeks later, on the morning of our second auction, things were no so great. We were having issues with our credit card processor, <a href="https://getcardflight.com">CardFlight</a> and spent a lot of time on the phone with them sorting out the problem. As a precaution, <a href="http://twitter.com/orta">Orta</a> pulled of an extraordinary feat of engineering to produce a manual card entry interface in a matter of hours. The card processing was working, but it would’ve been better to be safe than sorry.</p>

<p>That evening, the auctions team was preparing, and they discovered a problem: <em>some</em> of the Kiosks were experiencing a new problem processing cards. That was strange because earlier that day, the first issue was affecting <em>all</em> kiosks. Because we had had problems earlier that day with CardFlight, we assumed that this new problem was also on their end. We didn’t have time to debug the problem, but the event itself went fine because we had that manual entry interface. However, we definitely needed to find the cause of the problem later.</p>

<p>Orta tried over the next several days to diagnose the issue, but he couldn’t reproduce it at all. Different code, different build settings, different distribution methods – nothing could reproduce the problem.</p>

<p><img src="http://artsy.github.io/images/2014-11-18-debugging-our-hardware-problem/desk.jpg" alt="Debugging the issue" /></p>

<p>Eventually, we decided that the issue must have resolved itself somehow and hopefully wouldn’t pop up again. We simply didn’t have time to keep trying to reproduce a phantom bug.</p>

<p>Fast forward to last night at the <a href="https://artsy.net/feature/ici-benefit-auction-2014">third auction</a> facilitated with Eidolon. We get there, and some of the kiosks are exhibiting the same behaviour, even though our tests earlier in the day didn’t show the problem. We tried over and over again: disassembling a problematic kiosk, discovering it worked outside the housing, then reassembling it to see it no longer working. What could the problem be?</p>

<p>Well, let’s take a look at the kiosks we used last night.</p>

<p><img src="http://artsy.github.io/images/2014-11-18-debugging-our-hardware-problem/housing.jpg" alt="Kiosk housing" /></p>

<p>Notice anything different from our first auction kiosk?</p>

<p>In between the first and second auctions, the white faceplates we had ordered arrived. The auctions team put them on the Kiosks for the second auction, which is when the problem first presented. When Orta tried to reproduce the problem, the iPads he used weren’t in the housings – they were just on his desk.</p>

<p>It turned out that faceplate had some foam to provide resistance against the housing to prevent them from slipping apart. Take a look and see.</p>

<p><img src="http://artsy.github.io/images/2014-11-18-debugging-our-hardware-problem/disassembled.jpg" alt="Kiosk disassembled" /></p>

<p>When the faceplate was slid onto the housing, the foam was catching on the rubber padding of the card reader (which plugs into the headphone jack of the iPad). Sliding the faceplate onto the housing was sometimes pushing the card reader a few millimetres out of the headphone jack, causing our problem.</p>

<p><img src="http://artsy.github.io/images/2014-11-18-debugging-our-hardware-problem/catching.jpg" alt="The problem" /></p>

<p>The solution was simple: tear off the rubber padding from the card reader and cut off some foam from the faceplate.</p>

<p><img src="http://artsy.github.io/images/2014-11-18-debugging-our-hardware-problem/solution.jpg" alt="Our solution" /></p>

<p>After that, the faceplate would slide on without issue and all of the kiosks worked fine. It took some time to disassemble all of the kiosks, but we got it working in time for the auction. Eidolon’s third performance was a success.</p>

<p>As I said earlier, Eidolon is different from typical iOS applications – our experience writing typical apps left us ill-equipped to debug what turned out to be a hardware problem. We learnt that, when reproducing bugs that only happen in production, it’s crucial to reproduce the <em>physical</em> context that the bug is occurring in as closely as possible. We also learnt that jumping to the conclusion that CardFlight was responsible for our issues was, while a natural gut reaction, deserved closer scrutiny when later trying to reproduce the problem.</p>

<p>Our auctions team was happy that we solved the phantom card-swiping problem and our users were none-the-wiser to the hurried use of Allen keys backstage to disassemble and reassmble kiosks. Eidolon, the software that we had poured so much time into, was almost defeated by a errant piece of foam. But we prevailed.</p>

<div style="text-align:center;">
<a href= "http://www.thebos.co/p/XUJNAY"><img src = "http://artsy.github.io/images/2014-11-18-debugging-our-hardware-problem/success.gif"></a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing a Bidding Kiosk for iOS in Swift]]></title>
    <link href="http://artsy.github.io/blog/2014/11/13/eidolon-retrospective/"/>
    <updated>2014-11-13T10:00:00-05:00</updated>
    <id>http://artsy.github.io/blog/2014/11/13/eidolon-retrospective</id>
    <content type="html"><![CDATA[<p>In the Summer of 2014, we began developing a bidding kiosk for the Artsy auctions platform (code-named <a href="https://github.com/artsy/eidolon">Eidolon</a>). Typically, the iOS team here at Artsy worked on two main apps: a <a href="http://iphone.artsy.net">consumer-facing iPhone app</a> and an iPad app used by art galleries. For Eidolon, we followed <a href="https://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/">Artsy’s standard practices</a> for building our software and use GitHub issues as our canonical source for bug reports and feature requests. Many of the components used in our apps are <a href="https://github.com/artsy">open source</a>, but the codebases themselves remain in private repositories.</p>

<p>Initial planning for Eidolon began over the Summer. Our designer <a href="http://twitter.com/katarinabatina">Katarina</a> had the main features sketched out. I was scheduled to work on it at first, with <a href="http://twitter.com/orta">Orta</a> and <a href="http://twitter.com/1aurabrown">Laura</a> joining me near the end of the project. We had a rough scope: the app would be able to list artworks at an auction and allow prospective bidders to learn more about these artworks. The user would be able to register to bid and place bids using the Kiosk, including credit card processing for identity-checking.</p>

<!-- more -->


<p><img src="http://artsy.github.io/images/2014-11-12-eidolon-retrospective/listings.png" alt="Finished Eidolon App" /></p>

<h2>An Idea</h2>

<p>Orta and I met some friends over a weekend in Austria and, during our drive across the country, discussed the possibility of developing this new iOS app as a completely open source project. We were both excited about the prospect and had the support from <a href="http://twitter.com/dblockdotorg">dB</a> to make it open. There were just some technical issues that would have to be addressed to make the Kiosk app an open source reality. For example, how would we restrict access to the app’s API keys? Developing Eidolon in the open would let us share what we&#8217;ve learned, a value at Artsy, and also allow us to easily ask for help from the community.</p>

<p>We were also together in San Francisco for Apple’s announcement of Swift. Following the announcement, there were lots of small pieces of source code published on the Internet that demonstrated some of Swift’s new features, but a large project didn&#8217;t really exist to show how iOS apps written in Swift don’t have to be moulded by outdated Objective-C traditions.</p>

<p>I wanted to write this app in Swift. After speaking with Orta, he said that as long as we could meet the deadlines, that would be okay. (Since this app uses enterprise distribution instead of the App Store, using beta versions of Xcode wouldn’t be a problem.)</p>

<p>More than just an app written in Swift, I wanted to build this app with functional reactive programming principles in mind. We would be using ReactiveCocoa any place that it made sense. While I had begun using it in our consumer iPhone app, it was mostly replacements of KVO code. This would be a fully “functionally reactive” app, a first for Orta and Laura.</p>

<p>So to summarize: our team embarked on a brand new project, developed in the open, using a new and incomplete language, built using a non-standard approach to functional programming, and using beta versions of Xcode. It was ambitious, but we were excited by the prospect of learning new things. I believed then, and do now, that Swift is the future of iOS development, and we love to be on the cutting edge (Artsy’s iOS apps are often testbeds for new CocoaPods features). There’s also an incredible demand for sample code written in Swift, so having a complete codebase written in Swift early in the language’s lifetime would be a significant contribution to the open source community.</p>

<h2>Getting Started</h2>

<p>The first steps were trivial. We examined our existing approach to iOS development and decided what techniques would be appropriate to use on this new project. Then, we identified tools that we needed to use those techniques. In some cases, existing tools needed to be modified to suit our needs. In other cases, the tools didn’t exist at all and we had to invent them.</p>

<p>Shortly after Swift’s announcement, <a href="http://twitter.com/modocache">Brian Gesiak</a> began work on <a href="https://github.com/Quick/Quick">Quick</a> and <a href="https://github.com/Quick/Nimble">Nimble</a>, a Swift-based testing framework and matchers framework, respectively. We would be able to continue using rspec-like syntax for our unit tests – awesome.</p>

<p>We use continuous integration on our other iOS projects and wanted to do the same for Eidolon. However, our usual CI provider, <a href="https://travis-ci.org">Travis</a>, has historically not supported beta versions of Xcode – our only choice for CI would be Jenkins. With a basic Swift Xcode project in hand, Orta set up Jenkins on a Mac Mini in the Artsy office. This didn’t meet our needs for a few reasons. Primarily, getting the build to work from a command line was difficult with Swift and Xcode 6 – Orta spent quite some time getting it configured. However, we all sorely missed some of the great integrations that Travis provides, particularly with GitHub. During development, we technically did have continuous integration, but it wasn’t leveraged to nearly the degree that it could or should have been.</p>

<p>A large portion of our tests on our other iOS apps rely on <a href="https://github.com/facebook/ios-snapshot-test-case">snapshot tests</a> and we use a <a href="https://github.com/dblock/ios-snapshot-test-case-expecta">set of Expecta matchers for Specta</a> that DB wrote. However, we weren’t using Specta for Eidolon and the matchers we were using wouldn’t work, so I <a href="https://github.com/AshFurrow/Nimble-Snapshots">wrote some new ones</a>. This was great from my perspective, since I didn’t really understand how the under-the-hood of a unit testing framework worked until I wrote the new matchers. It’s been fun and educational to see Quick and Nimble grow as projects. As an early adopter, the Artsy iOS team has been able to provide feedback on its development. This has hopefully helped Quick and Nimble grow in ways that benefitted from real-world use, but by contributing to the project, it also helped us get features we needed faster (you can insert either a “quick” or “swift” pun here as you wish).</p>

<p><img src="http://artsy.github.io/images/2014-11-12-eidolon-retrospective/polaroid.gif" alt="*click*" /></p>

<p>As I neared the beginning of development work on Eidolon, Orta and I discussed how we would want our networking layer to operate. One our our <a href="https://github.com/artsy/eidolon/issues/9">first GitHub issues</a> enumerated the desired features of our new network layer. In summary:</p>

<ul>
<li>Make it easy to run the app offline</li>
<li>Treat stubs as a first class citizens</li>
<li>Allow tests to state that only networking request X is allowed during this test run</li>
<li>Keep track of current requests and don&#8217;t support dupes</li>
</ul>


<p>These features grew mainly out of frustrations with our ad hoc approach to network testing on our other projects: some tests would rely on stubbed models with populated data while other tests would rely on <a href="https://github.com/AliSoftware/OHHTTPStubs">stubbed network responses</a>.</p>

<p>The result of these conversations was <a href="https://github.com/AshFurrow/Moya">Moya</a>, a networking library that takes advantage of some really cool features in Swift. With some <a href="http://chris.eidhof.nl/posts/typesafe-url-routes-in-swift.html">help from Chris Eidhof</a>, we were able to write a functional-esque network abstraction library on top of <a href="https://github.com/Alamofire/Alamofire">Alamofire</a> that provided compile-time checking for API endpoints. I even wrote an optional ReactiveCocoa-based interface for Moya. This interface does not accept callback closures; instead, it returns a <em>signal</em> that represents the network request. Following <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/4403d84348b30f5ffa05dfcd6317b14e0efecc62/Documentation/FrameworkOverview.md#connections">ReactiveCocoa best-practices</a>, this signal is <em>cold</em>, meaning that until someone subscribes to it (that is, registers their interest in the network request), the request is not fetched. We were even able to write a check for duplicate, in-flight requests and return existing signals.</p>

<p>Combined with the optional ReactiveCocoa extensions, Moya succeeded in addressing all of our needs for Eidolon’s network layer. Additionally, as each project matured, the needs of a full app informed the design and development of Moya.</p>

<p>One final component that had to be addressed before main development could get underway was the issue of API keys. We wanted to have our app accessible to anyone who was interested in it, but limit access to our API keys. Keeping keys secure when they are stored near source code is closely related to the problem of keeping keys secure once an app is compiled. To <a href="http://www.quora.com/How-were-the-Twitter-iPhone-and-Android-OAuth-keys-leaked">quote John Adams</a>, a member of the Twitter Security Team:</p>

<blockquote><p>Putting this in the context of, &#8220;should you be storing keys in software&#8221;, is more appropriate. Many companies do this. It&#8217;s never a good idea.</p></blockquote>

<p>Over the course of a few weeks, Orta solicited some help from CocoaPods contributor <a href="http://twitter.com/segiddins">Samuel Giddins</a> to create <a href="https://github.com/orta/cocoapods-keys">cocoapods-keys</a>. This project is a <a href="http://cocoapods.org">CocoaPods</a> plugin that stores the <em>names</em> of the keys you want to use in a plaintext file in your <code>~/.cocoapods</code> directory. The <em>values</em> of the keys with matching names are stored securely in your OS X keychain. Whenever you run <code>pod install</code>, this plugin generates an obfuscated <code>char</code> array with all of your applications keys mixed up with some other random data. The keys are only un-scrambled at runtime, and the file is ignored by git. Every developer on our team has their own API keys that are stored in their OS X keychains, far away from any git repository. While using this technique by no means guarantees the security of your API keys (a dedicated hacker with a debugger attached to your running app would still be able to retrieve your keys), it’s better than nothing.</p>

<p>We began main work on the project. Orta and I divided the app into two pieces: auction listings and bid fulfillment. We created two separate storyboards that would each encapsulate one of these app components. Orta took fulfillment and I took listings – over the course of Eidolon’s development, we had very few merge conflicts.</p>

<p>We used <a href="https://github.com/paulsamuels/SBConstants">SBConstants</a> to have compile-time safety when referring to storyboard identifiers and we used Swift’s operator overloading to make using these constants <a href="https://github.com/artsy/eidolon/blob/a96763b7ccee9cd35c30079ff4044779d30e999a/Kiosk/App/UIStoryboardSegueExtensions.swift">really easy</a>. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
</span><span class='line'>    if segue == .LoadAdminWebViewController {
</span><span class='line'>        // code goes here
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>A component that I had not developed before was an admin panel that Orta made. This panel is accessible via a hard-to-accidentally-invoke gesture within the app and is protected by a password to prevent users from accidentally accessing it. The admin panel lets you change core behaviours of the app without recompiling it. For example, the panel is used to change between production and staging.</p>

<p><img src="http://artsy.github.io/images/2014-11-12-eidolon-retrospective/admin.png" alt="Admin Panel" /></p>

<p>Speaking of production and staging, to prevent developers from accidentally placing bids on production and to prevent live users from inadvertently using the staging servers, Orta made a simple badge that would let you know if you were on staging. If you were running in the simulator, it would also alert you if you were running on production. This was great, but wouldn’t prevent someone from accidentally placing bids on the production server while testing on a device. <a href="https://github.com/artsy/eidolon/blob/9181be833459307bb749df2264b3d339b371ee59/Kiosk/Auction%20Listings/ListingsViewController.swift#L157-L169">Our solution</a> was to check your current wifi network name. If it looks like you’re at the Artsy offices, then the production flag is shown, even on a device.</p>

<p>So we’ve got the scaffolding for a great app and it was time to really begin development. Using ReactiveCocoa, we were able to make our <a href="http://artsy.github.io/blog/2014/09/22/transparent-prerequisite-network-requests/">XApp authentication transparent</a>. Functional reactive programming had other great benefits, like <a href="https://github.com/artsy/eidolon/blob/9181be833459307bb749df2264b3d339b371ee59/Kiosk/Auction%20Listings/ListingsViewController.swift#L87-L137">scheduling automated refreshes</a> of auction listings. We may have <a href="https://github.com/artsy/eidolon/blob/9181be833459307bb749df2264b3d339b371ee59/Kiosk/Auction%20Listings/ListingsViewController.swift#L48-L68">gone overboard</a> in one instance (cleaning that up is on my todo list), but ReactiveCocoa has made modelling complex behaviour of Eidolon relatively easy.</p>

<p>Of course, learning how to ReactiveCocoa is no easy feat. At this point, Orta and Laura were both working on Eidolon. There were many conversations in our Slack chatroom about how to approach problem-solving the ReactiveCocoa way and, with some time, they both became proficient at creating and manipulating signals. Sweet.</p>

<p>I’ve often been asked by people who want to use ReactiveCocoa about how to get their team up to speed; until recently, I didn’t have an answer. Now that I’ve done it, I can say that the most important thing is that you realize that you’re going to be responsible for this decision. If another developer needs help using ReactiveCocoa, you’ll be the one that helps them, so take that into consideration when scheduling your work. There were also several occasions where I didn’t know the answers to the questions Orta and Laura had, but the ReactiveCocoa community was there to support us.</p>

<p><img src="http://artsy.github.io/images/2014-11-12-eidolon-retrospective/clap.gif" alt="Finished Eidolon App" /></p>

<p>So what about Swift? I mean, there are other apps out there for iOS 8 and other apps that use ReactiveCocoa – how did we find Swift?</p>

<p>Well, at first it was great. We took our own approach to it, trying out new language features that were unavailable to us in Objective-C. We even did away with the usual comment header that Xcode includes in newly created files – what is that even for?</p>

<p>Progress was slow at first, but Orta and I (Laura was not yet on the project) assumed that was due to our unfamiliarity with the language. Eventually, we became relatively proficient, but our progress was still really slow. Why?</p>

<p>However ready you think the Swift language is (and however much you believe <a href="http://www.apple.com/swift/">Apple’s PR</a> about the language), the reality is that the tools necessary to use Swift are far from ready. During the Xcode 6 betas, we stayed up-to-date in the hopes that newer versions of Xcode would fix our problems. However, after the GMs were released, it became apparent that these problems would just be a reality of working in Swift.</p>

<p>What kind of problems? Certainly there were Xcode crashes, but those were mostly fixed by beta 5. Building the app with enterprise distribution certificates cost us a few days of headaches, sure. And we still can’t compile the app with compiler optimizations without causing a segfault. But what really became the bane of our existence were SourceKit crashes.</p>

<p><img src="http://artsy.github.io/images/2014-11-12-eidolon-retrospective/crash.gif" alt="SourceKit Crash" /></p>

<p>When SourceKit crashes, you temporarily lose autocomplete, syntax highlighting, and the behaviour of the text editor’s shortcut keys changes dramatically. The larger your project, the more often SourceKit crashes. These crashes can last anywhere from a split second to ten seconds or more and can be alleviated using an array of cargo-cult techniques such as:</p>

<ul>
<li>deleting your derived data folder</li>
<li>restarting Xcode</li>
<li>restarting your computer</li>
<li>restarting the project from scratch using Objective-C</li>
</ul>


<p>It’s really too bad. I’ve been asking for a <a href="http://ashfurrow.com/blog/we-need-to-replace-objective-c/">replacement to Objective-C</a> for a while and, when Swift was announced, I was ecstatic. However, based on our experience using Swift in a full production app, it is our conclusion that Swift is not yet ready for use in production apps unless you are willing to take on unknown risks and delays. As much as I <em>want</em> to like Swift, I can’t make the recommendation that you should use it, even if that’s what I’d like to say. I think that Steve Streza put it best:</p>

<blockquote class="twitter-tweet" lang="en"><p>Objective-C in the streets, Swift in the sheets.</p>&mdash; Steve Streza (@SteveStreza) <a href="https://twitter.com/SteveStreza/status/474069822808915968">June 4, 2014</a></blockquote>


<p> <script async src="http://artsy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>As we neared our deadline, we realized that we probably weren’t going to make it. This was despite Katarina dropping some features from the “must-have” list. Orta sent out an email to the auctions team letting them know the bad news and we looked at alternatives; none of them suited us. Through some late nights and weekends, and a lot of coffee and tea, the three of us were able to complete the project with only a few hours to spare. It was a herculean effort and I’m incredibly proud to have worked with Orta and Laura to make it a success.</p>

<p>The launch went fairly smoothly, with Orta on-site to assist if necessary. The auction attendees found the software easy to use – one even said that the app made bidding “too easy”, which we are incredibly proud of.</p>

<p><img src="http://artsy.github.io/images/2014-11-12-eidolon-retrospective/launch.jpg" alt="Finished Eidolon App" /></p>

<p>However, this successful launch came at a cost. It was only through some very long hours and a disregard for code longevity that we were able to complete the project on time. Ignoring unit tests was fine at the time, but we now have significant technical debt that we’ll be spending the next few weeks repaying.</p>

<h2>Lessons Learned</h2>

<p>It is completely possible to write an open source iOS application, though we did have to create some tools to help us along the way. These tools are now available for everyone to use, so you should consider opening your next project from the start. We’ve adopted an “open by default” approach where we only keep things closed when we have to, like with our fonts which have restrictive licenses. If your next app isn’t a core part of what makes you you, consider having a conversation about the pros and cons of making it open source.</p>

<p>ReactiveCocoa is <em>really</em> great at networking. It forced us to use some good abstractions that we might have otherwise cut corners on. Orta describes complex signal mapping to be “too magic.” For example, you can probably figure out what the following line of code does:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAC(self, "artworks") &lt;~ XAppRequest(.Artworks(auctionID)).filterSuccessfulStatusCodes().mapJSON().catch { (error) -&gt; RACSignal! in
</span><span class='line'>    println("Error: \(error)")
</span><span class='line'>    return RACSignal.empty()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Grab some artworks with the auction ID, filter out non-successful status codes, turn the data into JSON, and if anything goes wrong with any of that, log the error and ignore the results. Then bind the result of that operation to the <code>artworks</code> property of <code>self</code>. Nice and easy.</p>

<p>We discovered, as I mentioned earlier, that Swift just isn’t ready for primetime yet. I want it to be, but it was probably a mistake to write the app in Swift. By our projections, it took us about four times longer than we had anticipated to complete the project (in terms of person-hours worked). A lot of that is admittedly due to our own faulty estimates, but a lot more of it is attributable to Swift’s immaturity. In future projects, we’re going to be more mindful about estimation.</p>

<h2>So What Now?</h2>

<p>Swift isn’t ready yet, but we already have an app written in Swift, so what do we do? We could rewrite the whole app in Objective-C, but that would represent a substantial effort with very little reward, considering that the tools surrounding Swift are expected to improve over the coming months and years. We could shift away from Swift, writing all new code in Objective-C, but a lot of the app relies on existing Swift idioms, like Moya’s compile-time safety of API endpoint checking.</p>

<p>So we’re pretty much stuck with Swift, as much as you can be “stuck” with a totally <em>awesome</em> language that just needs some more time to have a mature ecosystem of tools. Swift does, after all, address most of my concerns with Objective-C. It has a lot of features that made developing Eidolon a joy. I’m impressed with what Apple’s made so far, but I’m eagerly waiting for Xcode 6.2 and beyond.</p>

<p>On our other iOS projects, we’ll stick with Objective-C for now, but we’re starting to have conversations around what would be necessary to move to developing those in the open, too. In that respect, Eidolon has been an unqualified success.</p>

<p><img src="http://artsy.github.io/images/2014-11-12-eidolon-retrospective/success.jpg" alt="Success" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How we customized Google Site Search at Artsy]]></title>
    <link href="http://artsy.github.io/blog/2014/10/23/how-we-customized-google-site-search-at-artsy/"/>
    <updated>2014-10-23T14:47:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/10/23/how-we-customized-google-site-search-at-artsy</id>
    <content type="html"><![CDATA[<p>This post is about how, in a week, we switched from Solr to <a href="https://support.google.com/customsearch/answer/72326?hl=en">Google Site Search</a> and customized it into a fast, <a href="https://artsy.net/search?q=banksy">beautiful search service</a>. Search is a difficult problem &#8211; a really difficult problem. For small companies and startups, the common solution to search is to launch a custom search service based on <a href="http://lucene.apache.org/solr/">Solr</a> or <a href="http://www.elasticsearch.org/">Elastic Search</a>. While these services are very appropriate for private data, we think Google Site Search should be considered in addition to these services for a public website. It is often not considered because users search on a dedicated site with different intent than they search Google. We found that while this may be true, it is not necessarily a good reason to roll your own search service for your public site.</p>

<p><img src="http://artsy.github.io/images/2014-10-23-how-we-customized-google-site-search-at-artsy/photography-site-search.jpg" alt="Search for photography on artsy" /></p>

<!-- more -->


<h2>Why Google Site search?</h2>

<p>While rolling your own search service has the benefits of infinite customizability, it also takes a great deal of time and effort to build and maintain. Generic services such as Google Site Search, not only may solve your user&#8217;s search needs, but get benefits from their general purpose. Those benefits are difficult to recreate with a site-specific search app with limited content. Google, with its limitless search data, has a sophisticated understanding of user intent and relevance that is difficult to create without significant engineering effort. On Artsy, Google understands that &#8216;koons&#8217; refers to &#8216;Jeff Koons&#8217; and is not a misspelling of &#8216;deKooning&#8217;. It indexes long form content such as user generated posts, and yet knows that &#8216;andy&#8217; refers to &#8216;Andy Warhol&#8217; and not the user &#8216;Andy&#8217; who has never posted. Without knowing the number of inbound link to these pages, it would be difficult to rank our search results so effectively.</p>

<p>Before looking at Google Site Search, we made many valiant attempts at the great search problem. First, we implemented <a href="https://github.com/artsy/mongoid_fulltext">full text search in Mongo</a> (before it had full-text search). Eventually that became too slow and we transitioned to use Solr which we tweaked for 3 years. Importantly, we still use Solr for our autocomplete and all admin applications. When trying to deliver a great search results page, we found it difficult to properly weigh results across our many entities. The easiest solution we could find was Google Site Search which allows you to remove Google branding, customize weigh results and access their <a href="https://developers.google.com/custom-search/json-api/v1/overview">JSON api</a>. While that may seem perfect and done, it took us about a week of tweaking to get the most out of the GSS API and turn it into an Artsy branded experience.</p>

<h2>Will Google Site Search work for me?</h2>

<p>There are many deal-breaker level tradeoffs to consider when evaluating GSS. But in the end, it works well for Artsy and is so easy to setup and maintain that those tradeoffs may be worth it for you as well. We encountered three big issues when trying to implement GSS.</p>

<ol>
<li>You can no longer have admin only or user specific search results since you just get back public search results.</li>
<li>Updates to search results take around a week or two.</li>
<li>The ranking logic is magical and non-inspectable or modifiable.</li>
</ol>


<p>It is important to remember that Google doesn&#8217;t understand your business. It just wants to provide relevant results to people who come to Google, but people likely come to your site for a different reason. Google&#8217;s pagerank considers the entire internet of links towards you. This causes some results that are really good globally to be bad for a site specific search. For example, at Artsy, our highest value pages are Artist pages which convert best for our key metrics. Our editorial pages, while nice are our lowest value pages and convert poorly. Google tends to highlight the editorial pages which have many inbound links. We have hacked around this by bumping up artist pages in results but it isn&#8217;t ideal. Sometimes this works out favorably such as in the Banksy result below (one of our top searches). While SOLR give us artists who may be a misspelling of &#8216;Banksy&#8217;, GSS gives preferable result set with a mix of editorial content about Banksy and related categories.</p>

<p><img src="http://artsy.github.io/images/2014-10-23-how-we-customized-google-site-search-at-artsy/banksy-site-search.jpg" alt="Search for Banksy on artsy" /></p>

<h2>Getting the most out of Google Site Search</h2>

<p>First, make sure Google indexes your site. Google Site Search merely searches Google&#8217;s index of your public site. This may highlight issues with indexing that you may want to fix such as improving page titles, descriptions or adding helpful meta information.</p>

<h3>Google Site Search JSON API</h3>

<p>The most important next step is to use the <a href="https://developers.google.com/custom-search/json-api/v1/overview">JSON API</a> instead of letting Google render the results for you. GSS looks like Google Search (with some theming options). Google-style UI in your site is both conceptually and visually jarring to your users. Your designer may eventually want to move some things around so you might as well just start by rendering the results yourself.</p>

<p>In addition to these visual issues, GSS displays your page title, description and image intended for search engine result pages. This information should be changed to be more appropriate to people who are already on your site. See below where we compare a customized Google Site Search page with our own rendered version. We make the results more appropriate to Artsy by changing the order of results, cleaning up page titles and using visual layout.</p>

<p><img src="http://artsy.github.io/images/2014-10-23-how-we-customized-google-site-search-at-artsy/google-site-search.jpg" alt="Customized Google Site Search at Artsy" /></p>

<h3>Custom Metatags</h3>

<p>The GSS JSON API is not your custom API with a connection to your database but you can make it work like one. You no longer get back nicely structured data allowing you to know if the entity is say, an artist or an artwork. You just get back urls and their meta tags. The key to getting good data out of the GSS API is to use a custom Facebook <a href="http://ogp.me/">Open Graph</a> implementation (custom og:type) and other custom meta tags.</p>

<p>Note how Banksy appears in a different layout from Articles above. For artist pages, we use a custom OG type called &#8216;artsyinc:artist&#8217; which tell us which layout to use when displaying the result. We then include additional data like &#8220;og:nationality&#8221;, &#8220;og:birthyear&#8221; etc if we need extra information. In addition to improving our layout, this makes Artsy more semantic.</p>

<h3>Evaluating Search Changes</h3>

<p>In addition to doing internal testing and sending to friends, we used <a href="https://usertesting.org">usertesting.org</a> to get a wider spectrum of users. This proved valuable just to see how real people phrase queries. For us, an art site, queries differ between art specialists and people new to art. Being able to see both gave us insights such as making search results more visual than textual.</p>

<h2>In Conclusion</h2>

<p>Overall we were surprised at how well Google Site Search worked for us, a specialized art site. Given our level of customization it is impossible tell that we use it. We will see how well GSS plays out long term but so far, we have improved the search experience on Artsy while making it more semantic in the process. I only wish we had considered GSS a valid option earlier.</p>

<p>If you would like to try out Artsy&#8217;s public search API, we have a public version <a href="https://developers.artsy.net/docs/search">here</a>. It uses the <a href="https://github.com/wiseleyb/google_custom_search_api">google_custom_search_api</a> gem which makes GSS trivial to integrate into a Ruby app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launching a Security Bug Bounty Program at Artsy]]></title>
    <link href="http://artsy.github.io/blog/2014/09/24/launching-a-security-bug-bounty-program-at-artsy/"/>
    <updated>2014-09-24T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/24/launching-a-security-bug-bounty-program-at-artsy</id>
    <content type="html"><![CDATA[<p>Many established companies have bug bounty programs, including a recently publicized <a href="http://www.forbes.com/sites/kashmirhill/2014/09/10/bug-bounty-programs">Twitter Bug Bounty</a>. Some use services, such as <a href="https://hackerone.com">HackerOne</a> or <a href="https://bugcrowd.com">BugCrowd</a>. In early September 2014 we quietly launched <a href="https://artsy.net/security">our own Security Bug Bounty</a>. Since then we have fixed 14 issues reported by 15 security researchers and paid $750 in bounty. In the process we have learned a ton and wanted to share some things that would have probably done a little bit differently, knowing what we know now.</p>

<p>In this post I will focus on both technical and non-technical takeaways, and will provide an extensive list of vulnerabilities that should have been dealt with before launching our bug bounty.</p>

<!-- more -->


<h2>Before You Begin</h2>

<p>Our security bug bounty program started with an engineer (myself) creating a <a href="https://artsy.net/security">document</a> on our website, largely inspired from other bug bounty programs. Our staff attorney wanted to review and edit it, something that definitely needed to be done.</p>

<p>A less evident step was to have a conversation with the finance department about whether or not bounty could be paid to individuals living in countries that may have U.S. sanctions imposed on them (see <a href="http://www.treasury.gov/resource-center/faqs/Sanctions/Pages/answer.aspx">What countries do I need to worry about in terms of U.S. sanctions?</a>). We also needed to talk about the terms under which reward payments could be made at all - we now require the individual&#8217;s full name and postal address. Other bounty programs, including <a href="https://bounty.github.com/">Github&#8217;s</a>, require a <a href="http://www.irs.gov/pub/irs-pdf/fw9.pdf">W9</a> for U.S. citizens or a <a href="http://www.irs.gov/pub/irs-pdf/fw8ben.pdf">W8_BEN</a> for non-U.S. citizens before any payment can be made (we may start doing this as well).</p>

<p>Another question raised was regarding budget and how much money I expected to pay. With about $50 a bug I estimated that this program would not exceed about $1,000 in the first few months, with an initial spending spike, because with time bugs would be harder to find. This was the wrong way to think about it - hacking is a skill and better hackers are paid more to spend more time on a single issue. We are now receiving only a fraction of bug reports, but new issues typically required much more effort to engineer. Those cost us more money, proportional to potential reputation loss. To sum this up, I recommend budgeting a fixed quarterly amount and using it as a reference to cap the maximum amount of dollars paid for a single issue.</p>

<p>It should be clear that every dollar of the $1,000 spent each month is worth every penny when you consider having exploitable security vulnerabilities in your production systems.</p>

<h2>Security Bug Bounty Services</h2>

<p>I have looked at the many bug bounty services and were quite impressed with their offerings, their ability to automatically recognize duplicates and to report on a security researcher&#8217;s reputation. However, I didn&#8217;t want to add yet another service in the plethora of services that we already use and wanted to have some brand control. In all honesty I do not know whether rolling out our own was or wasn&#8217;t the best decision, but we&#8217;re getting security bug reports, fixing real issues, and that&#8217;s what matters.</p>

<h2>Full Time Attention Required</h2>

<p>The early days of the bug bounty program needed full time attention from one engineer who knew the entire system very well. This meant reading every report, triaging it as something new or already known, and opening detailed issues in the internal bug tracking systems. We labeled every issue as &#8220;Security Bounty&#8221; and created a &#8220;Security Bounty&#8221; project in Pivotal Tracker for issues that span multiple projects. We also found it useful to keep a Google Docs Spreadsheet to track the individuals reporting issues in a way where you can easily copy-paste all the issues that they have reported into an email to give them an update. <a href="https://docs.google.com/spreadsheets/d/1_Bq0jMImwU_r2-R76d2vqsYPLt9AB02lz2ZowK77yHc/edit?usp=sharing">Here&#8217;s such a blank spreadsheet</a> with some formulas that can instantly tell you how many issues were opened, fixed, etc.</p>

<h2>Communicating the Program to the Team</h2>

<p>After running the program for a week I sent an email with a bit of statistics and explanations to the entire team. The entire e-mail can be found <a href="https://gist.github.com/dblock/5781f9b4931191de42b4">here</a>, and if there&#8217;s one thing you retain from this post, that should be it. The e-mail was extremely well received, highlighting both the importance of explaining all-the-things to the rest of the company and being very transparent about such sensitive issues as security.</p>

<h2>Classes of Bugs</h2>

<p>While we were very diligent about large classes of potential vulnerabilities, such as SQL injections, most issues reported by the independent security researchers were also avoidable and should have been fixed before launching the program. Other issues should have been reviewed and acknowledged as a known, but acceptable risk upfront as well.</p>

<h3>SSL, Secure Cookies and HSTS</h3>

<p>If you let users signup and log-in or enter any personal information, your entire site must run under SSL. We were half way through this transition with some services still open for both SSL and non-SSL requests. Also you must enable <a href="https://scotthelme.co.uk/hsts-the-missing-link-in-tls">HSTS</a>, so that browsers that have visited your site before make an SSL request even if the user typed a non-SSL address, avoiding leaking session data over an insecure connection.</p>

<p>In Rails, HSTS is turned on with <code>config.force_ssl = true</code>. In node.js applications we use <a href="https://github.com/artsy/force-public/blob/master/lib/middleware/hsts.coffee">an HSTS middleware</a> combined with <a href="https://github.com/artsy/force-public/blob/master/lib/middleware/ensure_ssl.coffee">a redirect middleware</a>, but you might also want to check out <a href="https://github.com/evilpacket/helmet">helmet</a>.</p>

<p>Redirecting from HTTP to HTTPS is a compromise, it allows existing non-SSL clients and the myriad of existing links out there to keep functioning, however it exposes users to a potential risk of sending data over a non-encrypted connection, first. This is mitigated by using HSTS and by making sure session cookies carry a <code>secure=true</code> option.</p>

<h3>Clickjacking Vulnerabilities</h3>

<p>Make sure your site is not vulnerable to clickjacking. These attacks rely on loading the target page in an <code>iframe</code>. A simple test is to try to embed your site in the <a href="https://gist.github.com/dblock/8a91f805e97ba2325278">code in this gist</a>.</p>

<p>The standard and very simple fix is to deny framing by using the <code>X-Frame-Options</code> header with a <code>SAMEORIGIN</code> or, better, <code>DENY</code> value. There&#8217;s a rather advanced explanation of this problem and the difference between these two values in an article about <a href="http://webstersprodigy.net/2012/09/13/clickjacking-google">clickjacking Google</a>. This is enabled by default in Rails, and can be turned on in node.js applications with <a href="https://github.com/evilpacket/helmet">helmet</a>.</p>

<h3>Cross-Site Scripting and Content Security Policy</h3>

<p>Spend time looking for Cross-Site Scripting (XSS) vulnerabilities in your code. The majority could have been known by actually attempting to enter JavaScript into the few user inputs that we have and then going to the pages that display that content. Then examine the code for any instances that render raw HTML, usually via <code>!=</code> in Jade templates or HAML. Track down how this data is inputted into the system and check whether these need to really be raw HTML. As a rule of thumb, do not trust the data in your database or data returned from your API, and encode or sanitize HTML when rendering it. We use the <a href="https://github.com/rgrove/sanitize">Sanitize</a> gem in Ruby, as well as a <a href="https://github.com/artsy/force-public/commit/0902c3450a0de60ee2b3e45a08e2dab656b31d86">fix in our open-source front-end</a> for how to deal with this in a node.js app.</p>

<p>Content Security Policy (CSP) also helps prevent cross-site-scripting. You can add a <code>Content-Security-Policy</code> header, or its variations, <code>X-WebKit-CSP</code> and <code>X-Content-Security-Policy</code>.</p>

<h3>Preventing User Abuse</h3>

<p>Log-in as a user, note their session cookie and log the user out. If you can reuse the session cookie in a new browser, your&#8217;re not actually logging users out. This is particularly problematic on public computers and seems to be an issue often exploited by man-in-the-middle malware. To fix this, you must track sessions server-side.</p>

<p>Another similar problem is that all user sessions must be invalidated when a user resets their password. Imagine that you suspect that your account has been compromised, changing a password should make you safe again and the attacker who logged in as you earlier should be logged out. This is something natively supported by many session management implementations, including Devise, by adding a &#8220;salt&#8221; stored with the user record into the session cookie and comparing it after a session is deserialized.</p>

<p>Finally, make sure you either lock accounts or throttle after too many login or password reset attempts.</p>

<p>Another related example is when attackers can spam users with legitimate requests, such as password resets. For example, we didn&#8217;t <a href="https://github.com/artsy/flare/pull/12">restrict how many SMS messages one can send</a> on our iPhone app download landing page. This particular instance had no actual benefit for the attacker, but could have really hurt our reputation. What would you say if a paying customer reported being spammed with anything coming from your company?</p>

<h3>Open Redirect</h3>

<p>Review all HTTP redirects in your applications. A common problem is when you can supply a URI and be redirected to it after, for example, a social login. This, combined with an XSS, would leak your session cookies, so don&#8217;t ever redirect outside of your application. Furthermore, this can be a source of an XSS by itself with data URLs, something I had never seen before.</p>

<h3>Mixed Content</h3>

<p>Make sure the secure (HTTPS) pages aren&#8217;t loading insecure (HTTP) javascript. A man-in-the-middle attack would enable injecting JavaScript into, otherwise, secure pages. Don&#8217;t forget to check your error pages.</p>

<h2>Issues We Won&#8217;t Fix</h2>

<p>We attempt to fix every reported issue, even very small. A single vulnerability may not be a problem in isolation, but may be exploitable in combination with another unknown issue. Still, we want to be able to disagree with the risk assessment of the security researcher. Such issues require a detailed explanation in a well articulated and prepared response, as well as a mention in a list of issues not eligible for bounty in our program&#8217;s description. Here&#8217;re a few examples.</p>

<h3>User Enumeration and Discovery</h3>

<p>Attackers often obtain databases of user e-mails and try to use those on other services with password dictionaries. When users enter the wrong password on login, you&#8217;re supposed to be returning the same error message whether the account exists or not. While that would prevent user enumeration and make password attacks impractical, it&#8217;s terribly unhelpful to the person trying to access your website. Many sites choose not to fix this, including Artsy. After-all, we will eventually have all of the 11 billion people on Artsy and the issue will be moot!</p>

<h3>Cross-Site Request Forgery</h3>

<p>CSRF is a class of attacks that attempt to force a user to execute unwanted actions on a web application in which they are currently authenticated, often without their knowledge. This can be mitigated by ensuring that the action was triggered from a legitimately rendered page within a certain period of time. CSRF was disabled on Artsy following some complicated technical issues related to caching, and is something that would cost us a lot of time and effort to bring back. It&#8217;s a real problem, but not a critical one, so we explicitly list it in our bug bounty rules as ineligible for bounty.</p>

<h3>User Identity</h3>

<p>One of the most frequently reported issues is that we don&#8217;t require e-mail verification, which is by design on Artsy. We used to have email verification, but too many users found it confusing and would never confirm their e-mail addresses. We treat emails as usernames, without any additional level of trust except for manually verified users, something internal to our systems.</p>

<h3>Sender Policy Framework</h3>

<p>Having a Sender Policy Framework (SPF) record increases the chances people will get emails you send. Without one, your email has a greater chance of being marked as Spam. Adding an SPF may not be as simple, especially if you use multiple thirdparty services for delivering e-mail. Furthermore, it might make forwarded e-mails go to spam.</p>

<h2>Acknowledging Security Researchers</h2>

<p>While most security researchers do an amazing job reporting issues, there&#8217;s an unfortunately some number of bounty hunters who will dramatize issues or nag you for bounty payment or swag every other day. Many don&#8217;t understand why it takes two weeks to get paid, why you disagree on their assessment of the problem, or will think that you&#8217;re lying to them when you say a bug has been reported in the past by another security researcher. These are annoying and often discouraging exceptions.</p>

<p>I believe in the need of acknowledging the hard work done by the security researchers by listing their name on our security page, unless they don&#8217;t want to. I want to thank each and every one of them.</p>

<p>I also do believe in the need to increase transparency into your process by listing the general category of issues after they have been fixed. I want users to trust us based on real data rather than on us just saying that we care about users&#8217; security and privacy. I think everyone understands that software has bugs, and I don&#8217;t see any good reason to hide the security ones after they have been fixed.</p>

<h2>In Conclusion and a Word About Education</h2>

<p>A security bug bounty helps our systems be more secure and our users to trust us more. But that alone is not enough. Overtime the complexity of every system increases and the development team grows. We can only succeed at earning our users&#8217; trust if we actually spend time on security as a team. This includes teaching individual contributors how to avoid similar issues or entire classes of problems. I strongly encourage you to make a lot of extra effort to explain exploit vectors to all developers, using the issues reported by the Security Bug Bounty program as a starting point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Pattern Recognition to Automatically Crop Framed Art]]></title>
    <link href="http://artsy.github.io/blog/2014/09/24/using-pattern-recognition-to-automatically-crop-framed-art/"/>
    <updated>2014-09-24T10:28:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/24/using-pattern-recognition-to-automatically-crop-framed-art</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>The <a href="https://artsy.net/imamuseum">Indianapolis Museum of Art</a> (IMA) recently shared thousands of high-resolution images from its permanent collection with Artsy, including 5,000 images that were in an un-cropped state. These images contain color swatches, frames, and diverse backgrounds, as shown below. The clutter in these images made them inappropriate to display to end users, and invited an approach to automatically crop the images. This post explores some fully automated techniques to locate the piece of art within each photo. If you&#8217;re eager to jump straight to the code that worked best, you&#8217;ll find the implementation of the &#8216;Rectangular Contour Search&#8217; section <a href="https://gist.github.com/ilyakava/b2dbca43991d6c668dbb">here</a>.</p>

<p><img src="http://f.cl.ly/items/2C0e2X1G1R1i1z1Y0M1B/banner.png" alt="All of these images are open access. For reference, the accession numbers/names. 45-115.tif 45-9-v01.tif 54-4.tif 76-166-1-12b.tif 14-57.tif" /></p>

<!-- more -->


<p><em>Some samples from the IMA image dataset. The bold green shape indicates the best cropping choice found, and the thin yellow shapes are the alternative cropping choices.</em></p>

<p>Our specific goal within this project was to find a rectangle that best contains the artwork within each photo. We want a program that finds a rectangle small enough to exclude the backgrounds, color swatches, and (preferably) frames in the images. At the same time, we want to avoid over-cropping the image and excluding the edges of the artwork, even if the artwork contains regions of flat color similar to the background. We are always searching for a rectangle that contains the artwork, so we need to take care and not be distracted by geometrical artworks like those of <a href="https://artsy.net/artwork/josef-albers-i-s-lxxb">Josef Albers</a>.</p>

<p><img src="http://f.cl.ly/items/2A1t3h1K2l2q362f3A1Y/albers.png" alt="Cropping choices within a Josef Albers painting." /></p>

<p><em>Cropping choices within a Josef Albers painting. Copyright The Josef and Anni Albers Foundation / Artists Rights Society (ARS), New York</em></p>

<h2>Background</h2>

<p>What follows is a summary of some useful background knowledge for interpreting the output of common image transformations. Included are the corresponding commands in python that rely on the <a href="docs.opencv.org/master/">OpenCV</a> library which we used in this project.</p>

<h3>Blur Transformations</h3>

<h4><a href="http://docs.opencv.org/master/modules/imgproc/doc/filtering.html?highlight=gaussianblur#cv2.GaussianBlur">Gaussian Blur</a></h4>

<p><em>Gaussian Smoothing</em> is a technique for reducing noise in an image by averaging each pixel with its surrounding pixels. To perform Gaussian Smoothing, an image is <em>convolved</em> with a square <em>filter matrix</em> (with an odd number of dimensions to ensure symmetry) whose values (<em>weights</em>) are defined by a Gaussian distribution with some standard deviation \(\sigma\). The filter matrix is also called a <em>kernel</em> in the context of convolution. Shown below is a \(3\times3\) kernel with a \(\sigma\) of 0:</p>

<p>$$\frac{1}{16}\begin{bmatrix}1 &amp; 2 &amp; 1
&#92;\
2 &amp; 4 &amp; 2
&#92;\
1 &amp; 2 &amp; 1  \end{bmatrix}$$</p>

<p>Convolution is a matrix multiplication technique commonly used in image processing. An interpretation of convolution is that it is a technique to decompose one matrix (an output matrix) into a sum of shifted and scaled impulse functions (input matrix convolved with the kernel). The mechanics of convolution are beyond the scope of this post, and can be found <a href="http://www.songho.ca/dsp/convolution/convolution2d_example.html">here</a> and described more generally <a href="http://www.songho.ca/dsp/convolution/convolution.html#convolution_2d">here</a>.</p>

<p>The intended effect of Gaussian blur for our purposes is to disturb smaller boundaries and edges more than larger ones.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">blur</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">GaussianBlur</span><span class="p">(</span><span class="n">src</span> <span class="o">=</span> <span class="n">bw</span><span class="p">,</span> <span class="n">ksize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">sigma</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c"># to see the 3 by 3 filter matrix that the image bw is convolved with above:</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">getGaussianKernel</span><span class="p">(</span><span class="n">ksize</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">sigma</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="n">cv2</span><span class="o">.</span><span class="n">getGaussianKernel</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">T</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a href="http://docs.opencv.org/master/modules/imgproc/doc/filtering.html?highlight=medianblur#cv2.medianBlur">Median Blur Filter</a></h4>

<p>The <em>Median Filter</em> is a technique where each pixel in an image is replaced by the median valued pixel within a square neighborhood around that pixel, making it a non-linear noise reduction technique. Median filters do not blur edges, but they do damage thin lines and corners.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># uses the median in a 7 by 7 neighborhood to reassign each pixel</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">medianBlur</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">ksize</span> <span class="o">=</span> <span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Edges</h3>

<p>Edges in an image are defined to be where brightness changes abruptly. Edge detection is performed with 2D derivatives called gradients, either by finding maximums in first order gradients, or inflection points in second order gradients. Derivatives are usually continuous functions, but the gradients we will look at approximate the derivative at discrete points throughout the image by comparing each pixel to its neighborhood of pixels to establish a gradient vector (which points in the direction of maximum brightness change).</p>

<h4><a href="http://docs.opencv.org/master/modules/imgproc/doc/filtering.html?highlight=sobel#cv2.Sobel">Sobel Filter</a></h4>

<p>The <em>Sobel Filter</em> is an approximation to the first order gradient of an image. Using two orthogonal \(3\times3\) convolution matrices which each approximate a partial derivative of an image (in the x and y directions), it is possible to merge the results of the two convolutions to approximate the gradient of an image. The two relevant kernels to approximate the x and y direction gradient magnitudes are:</p>

<p>$$
\begin{bmatrix}1 &amp; 2 &amp; 1
&#92;\
0 &amp; 0 &amp; 0
&#92;\
-1 &amp; -2 &amp; -1  \end{bmatrix}
\ and\
\begin{bmatrix}1 &amp; 0 &amp; 1
&#92;\
2 &amp; 0 &amp; 2
&#92;\
1 &amp; 0 &amp; 1  \end{bmatrix}
$$</p>

<p>The variation in weights within the two kernels has the effect of incorporating smoothing, and is helpful for grayscale images where edge transitions are several pixels wide and where points along an edge might be slightly separated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># uses the above two partial derivatives</span>
</span><span class='line'><span class="n">sobelx</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Sobel</span><span class="p">(</span><span class="n">bw</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CV_16S</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ksize</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">sobely</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Sobel</span><span class="p">(</span><span class="n">bw</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CV_16S</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ksize</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">abs_gradientx</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">sobelx</span><span class="p">)</span>
</span><span class='line'><span class="n">abs_gradienty</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">sobely</span><span class="p">)</span>
</span><span class='line'><span class="c"># combine the two in equal proportions</span>
</span><span class='line'><span class="n">total_gradient</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">addWeighted</span><span class="p">(</span><span class="n">abs_gradientx</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">abs_gradienty</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a href="http://docs.opencv.org/master/modules/imgproc/doc/feature_detection.html?highlight=canny#cv2.Canny">Canny Edges</a></h4>

<p>The Canny edge detector is a multi-stage process that combines the first and second order gradients in a way that optimizes:</p>

<ol>
<li>Detection - missing few edges (thanks to sensitivity of 2nd order gradient)</li>
<li>Localization - precision of edges detected (thanks to precision of 2nd order gradient)</li>
<li>Single Responses - 1 edge detected per real edge (thanks to suppressing non-maxima values)</li>
</ol>


<p>A full description of this technique can be found <a href="http://en.wikipedia.org/wiki/Canny_edge_detector#Stages_of_the_Canny_algorithm">here</a>. The aspect of it that interests us here is its use of <em>hysteresis thresholding</em> that helps the continuity of edges. This is a process where in order to ensure the continuity of edge contours, the first order gradient is taken over two thresholds and then recombined. A high threshold is used for finding edge points with precision, and then a low threshold for connecting edge points to each other.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># apertureSize argument is the size of the filter for derivative approximation</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">Canny</span><span class="p">(</span><span class="n">bw</span><span class="p">,</span> <span class="n">threshold1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">threshold2</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span> <span class="n">apertureSize</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><a href="http://docs.opencv.org/master/modules/imgproc/doc/feature_detection.html?highlight=hough#cv2.HoughLines">Hough Lines</a></h4>

<p>The Hough Transform tries to find lines in an image explainable by the linear equation \(y=mx + b\). A more convenient way of expressing this equation on an image plane is with: \(d=xcos(\theta) + ysin(\theta)\) where a point \((x,y)\) is explained by the normal distance from the origin to the line (\(d\)) and the angle between that normal line and the x axis (\(\theta\)). To search for lines, we:</p>

<ol>
<li>Decide on a resolution for \(d\) and \(\theta\) that we are interested in.

<ul>
<li>We know that: \(-image\ diagonal \leq d \leq image\ diagonal\), and \(-90 \leq \theta \leq 90\) in degrees.</li>
<li>We choose a resolution that breaks up each of these continuous ranges into small enough discrete chunks, so that there are a total of \(d^{n}\) normal distances we will be interested in for each of \(\theta^{n}\) total angles.</li>
</ul>
</li>
<li>We use this decision to create a matrix \(H\) called the Hough Space Accumulator that is \(H \epsilon \mathbb{R}^{d^{n} \times \theta^{n}}\).</li>
<li>For each edge point in our image:

<ul>
<li>increment \(H\) at every \(d\) and \(\theta\) pair that creates a line passing through that point</li>
</ul>
</li>
<li>Pick the pairs of \(d\) and \(\theta\) that have an accumulator value in \(H\) above a certain threshold.</li>
</ol>


<p><img src="http://f.cl.ly/items/0K08010j1Q20070C2h0U/hough_by_hand.png" alt="The code used to generate this plot can be found [here](https://gist.github.com/ilyakava/c2ef8aed4ad510ee3987)." /></p>

<p><em>We search for Hough lines on a binary image. In this case we chose the top 22 lines to draw on the final image, their (\(d\), \(\theta\)) pairs are circled in blue on the accumulator matrix. The code used to generate this plot can be found in full <a href="https://gist.github.com/ilyakava/c2ef8aed4ad510ee3987">here</a>.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">HoughLinesP</span><span class="p">(</span><span class="n">edges</span><span class="p">,</span> <span class="n">rho</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">theta</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">180</span><span class="p">,</span> <span class="n">threshold</span> <span class="o">=</span> <span class="mi">70</span><span class="p">,</span> <span class="n">minLineLength</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">maxLineGap</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://docs.opencv.org/master/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html?highlight=findcontours#cv2.findContours">Contour Search</a></h3>

<p>The contour search we used is a <a href="http://stackoverflow.com/questions/10427474/what-is-the-algorithm-that-opencv-use-for-finding-contours">border following technique for binary images</a>. It was developed to extract the hierarchical topology of a binary image, but that information is discarded in our use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">contours</span><span class="p">,</span> <span class="n">hierarchy</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">bin_img</span><span class="p">,</span> <span class="n">mode</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">RETR_LIST</span><span class="p">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CHAIN_APPROX_SIMPLE</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Experimental Evaluation</h2>

<p>We used the powerful open source image processing library, <a href="http://opencv.org">OpenCV</a>, with python for our experiments. We operated on images with 400 pixels as their largest dimension. This decision was made in the interest of quick image transformations, but we confirmed later that there were no significant improvements in artwork border detection with larger images.</p>

<h3>Hough Lines</h3>

<p>An early attempt at detecting artwork borders consisted of the following steps:</p>

<ul>
<li>Gaussian blur</li>
<li>Combine x and y Sobel Filters (w/ scaling)</li>
<li>Gaussian blur</li>
<li>Canny edge detection</li>
<li>Finding Hough lines</li>
<li>Extrapolating the intersection of the Hough lines to get corners</li>
</ul>


<p>The choice of the Sobel filter was motivated by the great number of artwork images with light and gradual transitions between the artworks and their surrounding mattes, as well as between the paper artworks and their backgrounds. The smoothing in the Sobel filter makes it an edge detector well equipped for gradual borders. The Gaussian blur was used to minimize the interfering details within the artworks. The Canny edge detector was then used to fill in discontinuities in the borders. Finally, Hough lines were found, in the hopes that the most prominent lines would be along the edges of the artwork.</p>

<p><img src="http://f.cl.ly/items/3C1z3A172C0Y2C0x1F09/corner_good_case2.png" alt="Corner detection working well. A high contrast background and a lack of geometrical shapes in the artwork led to occasional good performance. Open access image: 41-88.tif" /></p>

<p><em>Corner detection working well. A lack of geometrical shapes in the artwork combined with strong artwork borders led to occasional good performance.</em></p>

<p>Occasionally, the correct corners were found within 4-6 lines. More often, it took 30-50 lines for the correct corners to be identified. This method struggled to find Hough lines for discontinuous borders, which were common in our dataset and preprocessing techniques were not able to completely overcome. Often, since the content within the artwork, or far outside the artwork, was of much greater contrast than the border between the artwork and background, the most prominent lines were in fact within the artwork.</p>

<p>The chief problem with this approach was that once the sensitivity of the search was increased enough to find the correct edges, there were too many lines found overall. It was hard to distinguish the right lines from the wrong lines since the desired border lines were not longer, more horizontal or vertical, nor more common than undesirable lines within the artwork. Distinguishing between the resultant corners of all these lines was also a lost cause since there were often too many alternative corners that interfered with choosing the correct cropping. Searching for correct combinations of corners is futile since it grows \(\mathcal{O}(n^{4})\) at worst.</p>

<p><img src="http://f.cl.ly/items/1u070G2u3O2r0Q0n0m32/combo_bad_case.png" alt="Corner detection performing poorly. Open access images, accession numbers are top: 10-194-v01.tif, bottom: 11-101.tif" /></p>

<p><em>Corner detection performing poorly. The top row shows a case where the content of the image starts to interfere with the border detection (which is even worse for some high contrast lithographs). The bottom row shows a case where lines outside of the artwork dominate the scene. It would be difficult to think of a ranking method that would work for both of these cases. The green circles show all of the potential corners found from intersection of Hough Lines.</em></p>

<p>Tweaking preprocessing effects also greatly varied the performance across the dataset in a non-generalized way. A tweak that would improve performance in one set of images would inhibit finding the correct Hough lines in another set.</p>

<h3>Rectangular Contour Search</h3>

<p>We went a different direction and instead decided to take advantage of a more specific feature within our dataset. We started searching for rectangular closed contours with the following strategy:</p>

<ul>
<li>Preprocessing the image to minimize non-target edges

<ul>
<li>Dilation</li>
<li>Median Blur Filter</li>
<li>Shrinking and enlarging</li>
</ul>
</li>
<li>Canny edge detection with dilation</li>
<li>Searching for contours along the edges</li>
<li>Throwing out all contours not fulfilling the constraints:

<ul>
<li>exactly 4 points</li>
<li>right angles (5 degree tolerance)</li>
</ul>
</li>
<li>Picking the best of the remaining contours, that minimizes a combination of:

<ul>
<li>Shape distortion</li>
<li>Proportion of the image&#8217;s surface area</li>
<li>Displacement of the shape from the center of the image</li>
</ul>
</li>
</ul>


<p><img src="http://f.cl.ly/items/0L2t2z2h3w3O130C2T0s/flow.png" alt="The Rectangular Contour Search workflow stages in pictures. The code used to generate this figure can be found [here](https://gist.github.com/ilyakava/b2dbca43991d6c668dbb). Open Access, accession number/filename: 2008-364b_v01.tif" /></p>

<p><em>The Rectangular Contour Search workflow stages. The code used to generate this figure can be found in full <a href="https://gist.github.com/ilyakava/b2dbca43991d6c668dbb">here</a>.</em></p>

<p>This method fared much better than the Hough lines technique because it was much more immune to discontinuities in our borders of interest (thanks in part to the dilation and resizing, but mostly to the contour search). Dilation had the effect of thickening the desired edges, and flooding out the less significant edges within the artwork. Resizing the artwork (shrinking and then enlarging) had the effect of removing isolated noise outside of the border, making for an easier to single out border (<a href="http://www.cs.umb.edu/~marc/cs675/cvs09-12.pdf">Pomplun</a>).</p>

<p>Because this method searched for a more specific feature than the Hough lines method (rectangles rather than simply lines), interference from the content of the artworks was subdued. In addition, we gained the possibility of ranking the different shapes found accurately. While useful versus useless Hough lines were indistinguishable quantitatively, contours could easily be ranked by their distortion (we are always looking for rectangles), their displacement from the center of the image (should be the central object of interest), and their size.</p>

<p>This was the best performing method we tried, and achieved a 85% success rate on our dataset. It also carried the benefit that obvious failures were easy to report. If no rectangles were found (15% of the time with the IMA set) this failure could be recorded in a spreadsheet, rather than generating a result image that needed to be visually inspected.</p>

<p>The code we used is available in full <a href="https://gist.github.com/ilyakava/b2dbca43991d6c668dbb">here</a>. See the images in this project, as well as others for the <a href="https://artsy.net/imamuseum">Indianapolis Museum of Art on Artsy</a>.</p>

<h2>Previous Work</h2>

<p>Below is a quick survey of some similar previous work that helped us during research.</p>

<ul>
<li>High contrast sheet of paper localization:

<ul>
<li><a href="http://stackoverflow.com/a/14368605/2256243">mmgp&#8217;s answer</a> incorporated using a median filter, then a morphological gradient (good for strong edges), thresholding (guided by Otsu), and then isolating the correct shape by comparing the area of the convex hull containing the shape and the area of its bounding box (01/16/2013).</li>
<li><a href="http://stackoverflow.com/a/8863060/2256243">karlphillip&#8217;s answer</a> incorporated using a median filter, Canny edges with dilation, finding all contours, and finally outputing the largest such rectangle (01/14/2012).</li>
</ul>
</li>
<li>Subtle drawn square in a photo localization:

<ul>
<li><a href="http://stackoverflow.com/a/7732392/2256243">karlphillip&#8217;s answer</a> incorporated dilating the image, using medianBlur, downscaling and upscaling the image, and then continuing the same way as with his <a href="http://stackoverflow.com/a/8863060/2256243">Sheet of paper localization answer</a> (10/11/2011).</li>
</ul>
</li>
<li>Obvious but partially blocked square localization:

<ul>
<li><a href="http://stackoverflow.com/a/10535042/2256243">karlphillip&#8217;s answer</a> used thresholding, and the find squares and bounding box functions (05/10/2012).</li>
<li><a href="http://stackoverflow.com/a/10535042/2256243">mevatron&#8217;s answer</a> used thresholding, Gaussian blur, Canny, and a sensitive search for many Hough lines (05/10/2012).</li>
</ul>
</li>
<li>Receipt Localization:

<ul>
<li><a href="http://stackoverflow.com/a/6555842/2256243">Martin Foot&#8217;s answer</a> used the Median Filter, Hough transform, drawing lines across the entire image and filtering out lines that are close to each other, or have few other lines that are nearly parallel to them (06/02/2011).</li>
<li><a href="http://stackoverflow.com/a/6644246/2256243">Daniel Crowley&#8217;s answer</a> suggested using Low canny restraints, and searching for the largest closed contour (06/02/2011).</li>
<li><a href="http://stackoverflow.com/a/6644246/2256243">Vanuan&#8217;s answer</a> used Gaussian blur, dilation, Canny edges, finding contours, and simplified the contours to polygons (09/20/2013).</li>
</ul>
</li>
<li>Correcting the perspective of a white card on dark surface. A <a href="http://opencv-code.com/tutorials/automatic-perspective-correction-for-quadrilateral-objects/">tutorial</a> on Hough Lines.</li>
<li>An in depth <a href="http://nabinsharma.wordpress.com/2012/12/26/linear-hough-transform-using-python/">tutorial</a> of Hough Lines with python code.</li>
</ul>


<h2>References</h2>

<p><a href="http://www.amazon.com/Practical-Introduction-Computer-Wiley-IS-Technology/dp/1118848454">Kenneth Daweson-Howe&#8217;s textbook</a> is the source of most of the knowledge in the Background section, as well as the excellent <a href="http://docs.opencv.org/master/">opencv documentation</a> which often included tutorials.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transparent Prerequisite Network Requests with Swift and ReactiveCocoa]]></title>
    <link href="http://artsy.github.io/blog/2014/09/22/transparent-prerequisite-network-requests/"/>
    <updated>2014-09-22T11:26:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/22/transparent-prerequisite-network-requests</id>
    <content type="html"><![CDATA[<p>Artsy&#8217;s <a href="http://developers.artsy.net">API</a> requires something called an <a href="https://developers.artsy.net/docs/authentication">XApp
token</a> in order to perform
requests. The token comes back with an expiry date, after which the token will
no longer work. A new token will have to be fetched.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;xapp_token&quot;</span><span class="p">:</span> <span class="s2">&quot;SOME_TOKEN&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;expires_in&quot;</span><span class="p">:</span><span class="s2">&quot;2014-09-19T12:22:21.570Z&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our previous iOS apps, tragically written in Objective-C, we have a lot of
code that looks like the following. <code>getXappTokenWithCompletion:</code> checks to
make sure that there is a valid token. If there is, it invokes the completion
block immediately. Otherwise, it fetches a token, sets it in a static variable,
and then invokes the completion block.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">ArtsyAPI</span> <span class="n">getXappTokenWithCompletion</span><span class="o">:^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">xappToken</span><span class="p">,</span> <span class="n">NSDate</span> <span class="o">*</span><span class="n">expirationDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">ArtsyAPI</span> <span class="n">getSomething</span><span class="o">:^</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">// do something</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">failure</span><span class="o">:^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// handle herror</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s kind of ugly. A better approach might be to embed the token-requesting
logic within the <code>getSomething:</code> method. But that kind of sucks, since we&#8217;d have
to reproduce that logic for <em>every</em> network-accessing method. If we have ten
methods, that&#8217;s ten times we need to duplicate that logic.</p>

<p>With our <a href="https://github.com/artsy/eidolon">new app</a> (written in Swift), we&#8217;re
using a network abstraction layer we&#8217;ve created called <a href="https://github.com/AshFurrow/Moya">Moya</a>.
Moya sits on top of <a href="https://github.com/Alamofire/Alamofire">Alamofire</a> and
provides an abstraction for API endpoints. Instead of having ten different
network-accessing methods, there is only <em>one</em> method to which you pass one of
the ten different possible <code>enum</code> values. This means you have compile-time
safety in your networking code, but that&#8217;s not really what we&#8217;re here to talk
about.</p>

<!-- more -->


<p>Moya has this cool last-minute closure that it invokes to sign requests, so we
can sign these requests like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">endpointsClosure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="n">target</span><span class="o">:</span> <span class="n">ArtsyAPI</span><span class="p">,</span> <span class="n">method</span><span class="o">:</span> <span class="n">Moya</span><span class="p">.</span><span class="n">Method</span><span class="p">,</span> <span class="n">parameters</span><span class="o">:</span> <span class="p">[</span><span class="n">String</span><span class="o">:</span> <span class="n">AnyObject</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Endpoint</span><span class="o">&lt;</span><span class="n">ArtsyAPI</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">endpoint</span><span class="o">:</span> <span class="n">Endpoint</span><span class="o">&lt;</span><span class="n">ArtsyAPI</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Endpoint</span><span class="o">&lt;</span><span class="n">ArtsyAPI</span><span class="o">&gt;</span><span class="p">(</span><span class="n">URL</span><span class="o">:</span> <span class="n">url</span><span class="p">(</span><span class="n">target</span><span class="p">),</span> <span class="n">sampleResponse</span><span class="o">:</span> <span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">target</span><span class="p">.</span><span class="n">sampleData</span><span class="p">),</span> <span class="n">method</span><span class="o">:</span> <span class="n">method</span><span class="p">,</span> <span class="n">parameters</span><span class="o">:</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Sign all non-XApp token requests</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">target</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">XApp</span>:
</span><span class='line'>            <span class="k">return</span> <span class="n">endpoint</span>
</span><span class='line'>        <span class="nl">default:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">endpoint</span><span class="p">.</span><span class="n">endpointByAddingHTTPHeaderFields</span><span class="p">([</span><span class="s">&quot;X-Xapp-Token&quot;</span><span class="o">:</span> <span class="cm">/* global XApp token */</span><span class="p">])</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that&#8217;s kind of cool.</p>

<p>Since there is only <em>one</em> method for accessing the API, we can easily inject
the token-checking method there. Something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">public</span> <span class="n">func</span> <span class="nf">XAppRequest</span><span class="p">(</span><span class="n">token</span><span class="o">:</span> <span class="n">ArtsyAPI</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="n">MoyaCompletion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="cm">/* token is valid */</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">moyaProvider</span><span class="p">.</span><span class="n">sharedProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="n">completion</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">moyaProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">ArtsyAPI</span><span class="p">.</span><span class="n">XApp</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">statusCode</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
</span><span class='line'>          <span class="cm">/* store token somewhere */</span>
</span><span class='line'>          <span class="n">moyaProvider</span><span class="p">.</span><span class="n">sharedProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="n">completion</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s <em>better</em>, but it&#8217;s still kind of ugly. We&#8217;ve got duplicated code in
there, and we&#8217;re just kind of abstracting away the callback mess; it still
exists, we just don&#8217;t see if as often.</p>

<p>OK, so what alternative is there? Well, Moya supports a <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>
extension that uses <em>signals</em> instead of callback closures. Super-cool. So we
can rewrite our <code>XAppRequest</code> function to be the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="n">XAppTokenRequest</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">RACSignal</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">newTokenSignal</span> <span class="o">=</span> <span class="n">moyaProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">ArtsyAPI</span><span class="p">.</span><span class="n">XApp</span><span class="p">).</span><span class="n">filterSuccessfulStatusCodes</span><span class="p">().</span><span class="n">mapJSON</span><span class="p">().</span><span class="n">doNext</span><span class="p">({</span> <span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="cm">/* store new token globally */</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">logError</span><span class="p">().</span><span class="n">ignoreValues</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="n">validTokenSignal</span> <span class="o">=</span> <span class="n">RACSignal</span><span class="p">.</span><span class="err">`</span><span class="k">return</span><span class="err">`</span><span class="p">(</span><span class="cm">/* does the token exist and is valid? */</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">RACSignal</span><span class="p">.</span><span class="err">`</span><span class="k">if</span><span class="err">`</span><span class="p">(</span><span class="n">validTokenSignal</span><span class="p">,</span> <span class="n">then</span><span class="o">:</span> <span class="n">RACSignal</span><span class="p">.</span><span class="n">empty</span><span class="p">(),</span> <span class="err">`</span><span class="k">else</span><span class="err">`</span><span class="o">:</span> <span class="n">newTokenSignal</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="n">func</span> <span class="n">XAppRequest</span><span class="p">(</span><span class="n">token</span><span class="o">:</span> <span class="n">ArtsyAPI</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">RACSignal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">XAppTokenRequest</span><span class="p">().</span><span class="n">then</span><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">RACSignal</span><span class="o">!</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">moyaProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">method</span><span class="o">:</span> <span class="n">method</span><span class="p">,</span> <span class="n">parameters</span><span class="o">:</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Neato. So we have abstracted the &#8220;check if there is a valid token and get one if
there isn&#8217;t&#8221; into its own private method called <code>XAppTokenRequest</code>. If the token
exists and is valid, then the function returns <code>RACSignal.empty()</code>, a signal
which completes immediately. Otherwise, we perform a fetch, which completes
when the XApp token request is finished.</p>

<p>Then we just need to use <code>then</code> on <code>RACSignal</code> to create a new signal that is
generated once the <code>XAppTokenRequest</code> signal completes. Since the <code>then</code> closure
is only invoked once the <code>XAppTokenRequest</code> signal completes, the newly created
request signal will be generated after the token is set, which is ideal.</p>

<p>All the code above is kind of simplified. That&#8217;s OK, since it&#8217;s just a proof of
concept. If you want the full code, it&#8217;s all available <a href="https://github.com/artsy/eidolon/blob/1804044dfa8b22d9f765a621a5dbde357440146c/Kiosk/App/ArtsyAPI.swift#L87-L112">on GitHub</a>
and the conversation surrounding this change is in a <a href="https://github.com/artsy/eidolon/pull/29">merged pull request</a>.</p>

<p>If you have run into this problem and have a different solution, we&#8217;d love to
hear from you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing the Public Artsy API]]></title>
    <link href="http://artsy.github.io/blog/2014/09/12/designing-the-public-artsy-api/"/>
    <updated>2014-09-12T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/12/designing-the-public-artsy-api</id>
    <content type="html"><![CDATA[<p>Today we are happy to announce that we&#8217;re making a new public API generally available, along with over 26,000 artworks from many of our institutional partners.</p>

<p>The Artsy API currently provides access to images of historic artwork and related information on <a href="https://artsy.net">artsy.net</a> for educational and other non-commercial purposes. You can try it for playing, testing, and learning, but not yet for production. The scope of the API will expand in the future as it gains some traction.</p>

<p><a href="https://developers.artsy.net"><img src="http://artsy.github.io/images/2014-09-12-designing-the-public-artsy-api/the-art-world-in-your-app.png" border="0"></a></p>

<p>If you just want to use the API, you can stop reading here and head to the <a href="https://developers.artsy.net/">developers.artsy.net</a> website. (The developers website itself is a classic Rails + Boootstrap example and is also <a href="https://github.com/artsy/doppler">open-source</a>.)</p>

<p>In this post we will step back and describe some of the technical decisions made during the development of the new API.</p>

<!-- more -->


<h2>First, Make All The Mistakes</h2>

<p>Artsy has been developing a homegrown API over the last four years, consisting of almost 400 endpoints and exposing over 100 domain models. It&#8217;s probably one of the largest <a href="https://github.com/intridea/grape">Ruby Grape</a> implementations and it has been battlefield-tested by the dozens of services that we have built around it, starting with our <a href="https://github.com/artsy/force-public">recently open-sourced artsy.net website</a>. The core API project itself is unfortunately not public.</p>

<p>As with all legacy code with many client dependencies, our API has accumulated a staggering number of architectural faults, which have become impossible to work ourselves out of without a major rewrite. When thinking about a public API we went back to the drawing board with a more pragmatic approach.</p>

<h2>Use Hypermedia</h2>

<p>One of the common problems of being an API client is figuring out which routes an API provides or what data is available. For example, what can I do with this specific artwork? Documentation helps, but it often lacks such context. Furthermore, URLs are long and cumbersome to reference, parse and use. How can we make the API more developer-friendly and discoverable? Our answer was to settle on a well-known Hypermedia format. We chose <a href="http://stateless.co/hal_specification.html">HAL+JSON</a> because it is disciplined and very complete. Let me illustrate by example.</p>

<p>The <a href="https://api.artsy.net/api">API root</a> lists all the API routes within &#8220;_links&#8221;, such as &#8220;artists&#8221;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>    <span class="err">artists:</span> <span class="err">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artists&quot;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you fetch artists from the above URL, they will be returned in the same JSON+HAL format. Each artist will include a number of links, notably to the artist&#8217;s artworks. This is a perfect example of &#8220;context&#8221;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_embedded:</span> <span class="err">{</span>
</span><span class='line'>    <span class="err">artists:</span> <span class="err">[</span>
</span><span class='line'>      <span class="err">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">123,</span>
</span><span class='line'>        <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>          <span class="err">artworks:</span> <span class="err">{</span>
</span><span class='line'>            <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks?artist_id=123&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="err">}</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>    <span class="err">]</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is very powerful and makes it possible to write a generic API client that consumes any HAL+JSON API with just a bit of meta-programming. For Ruby, we provide examples using <a href="https://github.com/codegram/hyperclient">hyperclient</a>. Here&#8217;s a more complete example that retrieves a well-known artist, <a href="https://artsy.net/artist/gustav-klimt">Gustav Klimt</a>, and a few of his works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;hyperclient&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="o">=</span> <span class="no">Hyperclient</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;https://api.artsy.net/api&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">api</span><span class="o">|</span>
</span><span class='line'>  <span class="n">api</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s1">&#39;Accept&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/vnd.artsy-v2+json&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">api</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s1">&#39;X-Xapp-Token&#39;</span> <span class="o">=&gt;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">artist</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">links</span><span class="o">.</span><span class="n">artist</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;4d8b92b64eb68a1b2c000414&#39;</span><span class="p">)</span> <span class="c1"># Gustav Klimt</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">artist</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> was born in </span><span class="si">#{</span><span class="n">artist</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">birthday</span><span class="si">}</span><span class="s2"> in </span><span class="si">#{</span><span class="n">artist</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">hometown</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">artist</span><span class="o">.</span><span class="n">links</span><span class="o">.</span><span class="n">artworks</span><span class="o">.</span><span class="n">embedded</span><span class="o">.</span><span class="n">artworks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">artwork</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Provide Canonical URLs for Resources</h2>

<p>In the past we returned different JSON payloads for a resource when it appeared within a collection vs. when it was retrieved individually. We have also developed solutions such as <a href="https://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a> to deal with this in a declarative way. However, clients were burdened to merge data. For example, our iOS application had to deal with the fact that different data existed in the local store for the same artwork depending on how a user navigated to it in the app.</p>

<p>With the new API each resource has a canonical, uniquely identifying, &#8220;self&#8221; link which is used to reference it from other resources. When a client encounters such a link and has already downloaded the resource, it can just swap the data without making an HTTP request. This is only possible because every single URL maps 1:1 with a specific JSON response - there&#8217;re no two data responses possible for the same URL. The retrieval of such data can be solved by a generic crawler - get a resource, fetch dependent resource links, iterate until you run out of links. Storage is even simpler and doesn&#8217;t have to know anything about our domain model since it just maps URLs to JSON bodies.</p>

<h2>Partition Data and Perform Access Controls at API Level</h2>

<p>Because we decided not to return two different types of responses for a given model, we needed to partition data at the model level. For example, we introduced publicly available <a href="https://developers.artsy.net/docs/users">Users</a> and private <a href="https://developers.artsy.net/docs/user_details">User Details</a>. Access controls are now done exclusively at the API level.</p>

<p>The API developer must simply answer the question of whether a client is authorized to retrieve a resource or not. The API will return a 403 or 404 otherwise and it&#8217;s not necessary to customize the response for different types of access.</p>

<h2>Be Disciplined About Data Access and NxM Queries</h2>

<p>The performance of APIs that return collections of objects has been a constant struggle. The initial API design attempted to help clients make the least amount of HTTP requests possible, often requiring many NxM server-side queries. This actually had a profoundly negative impact on overall performance and user experience than we have ever anticipated. Servers had to allocate a lot more memory to parse, render and cache very large JSON payloads, also causing larger garbage collection cycles. Web applications seemed slower because a lot of data had to be retrieved to render anything on initial page load. Mobile clients spend a lot more time parsing huge JSON payloads, requiring a lot of CPU and yielding rarely. This created a very sluggish user experience and much longer delays waiting for background processing to finish. To mitigate this and keep our API response times low on the server we had to leverage complicated caching schemes with <a href="https://github.com/artsy/garner">garner</a> and had to fine-tune Mongoid&#8217;s eager-loading endpoint by endpoint.</p>

<p>For the new API we decided to never return relational data for a given model and refactor relations at the API model level when necessary. For example, we do not return artist information with a given artwork, but we do return a collection of artist links (an artwork can be created by a group of artists).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">_embedded:</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">artist_links:</span> <span class="err">[</span>
</span><span class='line'>      <span class="err">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="nt">&quot;4fe8862daa12fb00010017b9&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>          <span class="err">artist:</span> <span class="err">{</span>
</span><span class='line'>            <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artists/4fe8862daa12fb00010017b9&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="err">}</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>    <span class="err">],</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can still leverage the fact that we do have embedded objects in MongoDB and the fact that HAL supports embedded data. For example, we always return editions embedded within an artwork. Being disciplined about this allows the server to make one database query for one API request.</p>

<p>Furthermore, creating such rigid rules forces us to never optimize for a specific client&#8217;s scenario. That said, we still want to make life easy for developers that need bulk loading of various resources. We plan to implement a <a href="http://techblog.netflix.com/2012/07/embracing-differences-inside-netflix.html">Netflix API</a>-style middleware, where you can supply a set of URLs and get back a single, full JSON response with many different embedded resources. HAL+JSON&#8217;s disciplined structure makes mixing data very easy.</p>

<h2>Use Media Types and Accept Headers for Versioning</h2>

<p>Our initial API lives under a versioned URL which includes &#8220;v1&#8221;. For the new API we decided to adopt a different model and use an &#8220;Accept&#8221; header which currently takes an optional &#8220;application/vnd.artsy-v2+json&#8221; media type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">curl</span> <span class="err">&#39;http://api.artsy.net/api&#39;</span> <span class="err">-H</span> <span class="err">&#39;Accept:application/vnd.artsy-v</span><span class="mi">2</span><span class="err">+json&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accept headers in the API context can be used to indicate that the request is specifically limited to an API version. Our API will serve a backward compatible format by default. However, when we decide change the format of a resource we will increment the API version and require a newer value in the header to retrieve it. The new version can become the default only after the old version has been fully deprecated.</p>

<h2>Create a Flat API Structure and Leverage 302 Redirects</h2>

<p>Our old API served all artworks from &#8220;/artworks&#8221; and artworks belonging to a partner from &#8220;/partner/:id/artworks&#8221;. This was convenient, but made obsolete by a Hypermedia API. API URL structure no longer matters, because you no longer have to build URLs yourself, but follow links instead.</p>

<p>We decided to expose all models at the root and to use query string parameters for filtering. The API uses a plural for all routes, so you can query both &#8220;/artworks&#8221; and &#8220;/artworks/:artwork_id&#8221;. At the Hypermedia API root level those differences are expressed in a declarative way in the shape of link templates with a singular (an artwork) or a plural (artworks) key, and all possible parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>    <span class="err">artworks:</span> <span class="err">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks{?public,artist_id}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="err">templated:</span> <span class="err">true</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">artwork:</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks/{id}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="err">templated:</span> <span class="err">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We leverage 302 redirects extensively. For example, querying &#8220;/current_user&#8221; redirects to &#8220;/users/:user_id&#8221; with a 302 status code (we cannot serve different content per user at the root of the API, as explained in a section above). Another good example is that the current API only provides access to public domain artworks, so if you navigate to &#8220;/artworks&#8221;, you will currently be redirected to &#8220;/artworks?public=true&#8221;, making this scheme future-proof.</p>

<h2>Do Not Paginate with Pages and Offsets</h2>

<p>Our original API accepted &#8220;page&#8221; or &#8220;offset&#8221; parameters. This was rather problematic for changing collections. Consider what happens when you are on page 5 and an item is inserted on page 4. Your next set of results for page 6 will include a duplicate that has just moved from page 5 onto page 6. Similarly, if an item was removed from page 4, a request to page 6 will skip an item that now appears on page 5.</p>

<p>Our new API returns subsets of collections with &#8220;next&#8221; links and optional counts. To fetch a subsequent page, follow the &#8220;next&#8221; link, which accepts an opaque &#8220;cursor&#8221; (internally we use the <a href="https://github.com/dblock/mongoid-scroll">mongoid-scroll</a> Ruby gem). The cursor retains position in a collection, including when an item has been deleted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">total_count:</span> <span class="err">26074,</span>
</span><span class='line'>  <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>    <span class="err">self:</span> <span class="err">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks?public=true&quot;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">next:</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks?cursor=...&amp;public=true&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also wanted to solve the problem of querying different page sizes as we often wanted to retrieve just a couple of items quickly on an initial page load, then make larger requests for subsequent pages as the user scrolled, or vice-versa. You can now supply &#8220;size&#8221; to all collection APIs and a cursored approach makes it possible to vary the number on every request.</p>

<p>To get the &#8220;total_count&#8221;, we decided to require clients to append &#8220;?total_count=true&#8221; to the query string. It&#8217;s not necessary to do all that counting work on the server side if you&#8217;re not going to use the data.</p>

<h2>Standardize Error Format</h2>

<p>We use HTTP error codes, however we also use JSON data that comes with those errors for additional, often humanly readable descriptions. We settled on a standard error format that includes a &#8220;type&#8221; and a &#8220;message&#8221;. For example, a 401 Unauthorized response will also carry the following payload.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">type:</span> <span class="nt">&quot;auth_error&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">message:</span> <span class="nt">&quot;The access token is invalid or has expired.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>We tried to stay pragmatic with our approach and still have time and room for improvements. We would love to hear from you on our <a href="http://groups.google.com/group/artsy-api-developers/subscribe">API developers mailing list</a> and hope you&#8217;ll give our new API a try at <a href="https://developers.artsy.net/">developers.artsy.net</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We open sourced our Isomorphic Javascript website]]></title>
    <link href="http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/"/>
    <updated>2014-09-05T15:09:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/force.png" alt="May The Force be With You" /></p>

<p>Today we&#8217;re happy to announce we&#8217;ve open sourced the entire Artsy.net web app, <a href="https://github.com/artsy/force-public">Force</a>.</p>

<p>Over the past few months, we&#8217;ve rewritten our web front-end to move off Rails and on to a <a href="http://nodejs.org/">Node.js</a> stack that shares Javascript code and rendering between the server and client, otherwise known as <a href="http://nerds.airbnb.com/isomorphic-JavaScript-future-web-apps/">Isomorphic Javascript</a>. After migrating to this new stack, we open-sourced our boilerplate, <a href="http://ezeljs.com">Ezel</a>, and have now gone a step further and open sourced Artsy.net.</p>

<!-- more -->


<h2>Isomorphic vs Monolithic</h2>

<p>Our transition to an isomorphic Javascript stack has been very successful albeit with some speed bumps. If you&#8217;re interested in the details we&#8217;ve written <a href="http://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/">a blog post</a>, given a talk at <a href="https://www.joyent.com/developers/videos/node-js-on-the-road-nyc-craig-spaeth-brennan-moore">Node on the Road</a> (slides <a href="http://www.slideshare.net/craigspaeth/artsy-node-on-the-roady-slides">here</a>), and another more extensive talk at <a href="http://www.hakkalabs.co/articles/monolithic-to-distributed-how-artsy-transitioned-from-ruby-on-rails-to-node-js-and-isomorphic-javascript#">this meetup</a>.</p>

<p>The short story is that we moved from a monolithic rails app to a couple of Node servers on Heroku. This vastly improved the performance of our site and our own development speed. Using the patters in Ezel, we are able to tailor assets packages to specific pages and render some of the page on the server. This cut our page-load in half (from 6.5 seconds to under 3 seconds) and our tests take about 5 minutes (down from around 5 hours!) with little reduction in coverage. Performance numbers aside, our real win was dramatically improved development speed due to some architecture decisions we made.</p>

<h2>Modularity</h2>

<p><a href="https://artsy.net/artwork/nathan-sawaya-red-head"><img src="http://artsy.github.io/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/sawaya.jpg" alt="Nathan Sawaya, Red Head, 2009" /></a></p>

<p>One of the biggest takeaways from the transition is the pleasure of modularity. By breaking our project up into smaller reusable pieces such as <a href="https://github.com/artsy/ezel#project-vs-apps-vs-components">apps &amp; components</a> we make it easier to experiment, test, and refactor with confidence knowing our code is encapsulated into clearly defined pieces.</p>

<p>For instance, we recently redesigned our <a href="https://artsy.net/about">about</a> page. To gradually introduce the new page, we simply started a new about2 app along side our old about app which you can see <a href="https://github.com/artsy/force-public/tree/0d5a49da08e94a91b3f23c7cd1005c1e83da7ba5/apps">a little back in Force&#8217;s history</a>. This let us push code into the new about2 app with confidence it wasn&#8217;t touching other parts of the stack. When it was time to ship it, we simply deleted the old about app folder and search and replaced &#8220;about2&#8221; to &#8220;about&#8221;. There was no need to dig around various stylesheets, views, etc. folders looking for places where code for the old about page might still live.</p>

<p><a href="https://github.com/artsy/ezel#components">Components</a> are particularly useful for re-usability. For instance building <a href="https://artsy.net/gene/abstract-expressionism">this gene page</a> (source code <a href="https://github.com/artsy/force-public/tree/master/apps/gene">here</a>) was mostly a matter of pulling in various components like a <a href="https://github.com/artsy/force-public/tree/master/components/follow_button">follow button</a>, a <a href="https://github.com/artsy/force-public/tree/master/components/filter">filter</a> component, this <a href="https://github.com/artsy/force-public/tree/master/components/artist_fillwidth_list">artist fill-width layout</a>, etc. Because the CSS for those components are clearly self-contained it&#8217;s easy to build up a small asset package that uses only the minimal CSS needed which you can see <a href="https://github.com/artsy/force-public/blob/master/assets/gene.styl">here</a>.</p>

<p>We&#8217;re so convinced this encapsulation is important that we&#8217;ve updated Ezel to <a href="https://github.com/artsy/ezel/tree/master/src/js-example/apps/commits/public/images">use app/component-level public folders</a> by default so you can even modularize static assets, like images, and keep them coupled with their respective apps/components.</p>

<h2>Open Source by Default</h2>

<p><img src="http://artsy.github.io/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/octocat.jpg" alt="Ocotcat" /></p>

<p>Even though Force isn&#8217;t a library, we have open-soured many of its components and libraries. Before open sourcing Force, we open sourced app-specific modules such as <a href="https://github.com/artsy/artsy-backbone-mixins">these backbone mixins</a> <a href="https://github.com/artsy/artsy-passport">this Artsy API authentication library</a>, or <a href="https://github.com/artsy/backbone-cache-sync">this module</a> we use to cache server-side Backbone requests.</p>

<p>Open-sourcing Force was pretty straightforward but we needed to make our sensitive keys/secrets private while not complicating development. To do this we wrote a .env file and uploaded it as a private gist that gets downloaded when setting up the app. We wanted to spread this open-source-by-default culture so we decided to update Ezel&#8217;s configuration to be able to use a .env file in this way as well. This makes it easy keep your sensitive configuration data private while allowing the rest of your app code to be open source. You can read more about this in Ezel&#8217;s <a href="https://github.com/artsy/ezel#build-scripts--configuration">Build Scripts &amp; Configuration docs</a>.</p>

<h2>Spreading The Love</h2>

<p>Force serves as an example of how we structured a large <a href="http://ezeljs.com">Ezel</a> project and contains the full commit history of its construction. Unfortunately, due to image licensing issues, we cannot open up the Artsy API and therefore this repository can&#8217;t serve as a runnable clone of our website. However, we will continue to merge our production code into it. If you have any questions feel free to hit us up on twitter: <a href="https://twitter.com/craigspaeth">@craigspaeth</a>, <a href="https://twitter.com/dzucconi">@dzucconi</a>, <a href="https://twitter.com/zamiang">@zamiang</a>.</p>

<p>We&#8217;re excited to continue pushing open source at Artsy. For more exciting open source projects take a look at <a href="https://github.com/artsy">our Github profile</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CocoaPods Caching with Travis CI]]></title>
    <link href="http://artsy.github.io/blog/2014/08/08/CocoaPods-Caching/"/>
    <updated>2014-08-08T11:46:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/08/08/CocoaPods-Caching</id>
    <content type="html"><![CDATA[<p>As <a href="http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain/">Ash said earlier</a> we like using Continuous Integration. Today I spent a large amount of time migrating us to use the new CocoaPods caching system in Travis CI. To make up for my lost time I&#8217;m passing on what I&#8217;ve learned and also showing how we do CI at Artsy with Objective-C apps. If you&#8217;re interested in how we do it in Swift, you can just check <a href="https://github.com/artsy/eidolon">Eidolon</a>.</p>

<!-- more -->


<p>First and foremost, this only works if you are paying for Travis CI.</p>

<p>Travis CI recently merged in support for <a href="http://docs.travis-ci.com/user/caching/">Caching of CocoaPods</a> - this is great! By using this, we&#8217;ve reduced our build times from an average of about 10 minutes, to about 7 minutes. It works by using your <code>Podfile.lock</code> as a key to cache your <code>Pods</code> directory, if the lock hasn&#8217;t changed then there&#8217;s no need to update the Cache and so <code>pod install</code> is not called on your project. This caused me an issue as the <code>[Project].xcworkspace</code> file that CocoaPods generates was not in source control, and the app wouldn&#8217;t build. Useful note, if you&#8217;re using <a href="http://guides.cocoapods.org/syntax/podfile.html#pod">development pods</a> in your build you probably shouldn&#8217;t use this as your Pods directory can get out of sync with the cached version.</p>

<p>We use a <a href="https://github.com/artsy/eidolon/blob/master/Makefile">Makefile</a> to separate the tasks required to build, test and deploy an app. The general structure of our Makefile is:</p>

<table>
<thead>
<tr>
<th> Action        </th>
<th> Reason </th>
</tr>
</thead>
<tbody>
<tr>
<td> Constants </td>
<td> A collection of constants that get resued by different make tasks. </td>
</tr>
<tr>
<td> CI Tasks </td>
<td> Separate commands necessary for running Xcode projects from the terminal. </td>
</tr>
<tr>
<td> Actions </td>
<td> Commands that manipulate your project state, or maintainance commands. </td>
</tr>
<tr>
<td> Deployment </td>
<td> Commands to get your app ready for the App Store, or Hockey. </td>
</tr>
</tbody>
</table>


<p>If you don&#8217;t know the syntax for Make, essentially if it&#8217;s on the same line you&#8217;re either setting constants or calling other make commands. If it&#8217;s on a separate line then you are running a shell command.</p>

<p>This is the <a href="http://orta.io/#folio-header-unit">Artsy Folio</a> Makefile in full:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="c"># Constants</span>
</span><span class='line'>
</span><span class='line'><span class="nv">WORKSPACE</span> <span class="o">=</span> Artsy Folio.xcworkspace
</span><span class='line'><span class="nv">XCPROJECT</span> <span class="o">=</span> Artsy<span class="se">\ </span>Folio.xcodeproj
</span><span class='line'><span class="nv">SCHEME</span> <span class="o">=</span> ArtsyFolio
</span><span class='line'><span class="nv">CONFIGURATION</span> <span class="o">=</span> Beta
</span><span class='line'><span class="nv">APP_PLIST</span> <span class="o">=</span> Info.plist
</span><span class='line'><span class="nv">PLIST_BUDDY</span> <span class="o">=</span> /usr/libexec/PlistBuddy
</span><span class='line'><span class="nv">TARGETED_DEVICE_FAMILY</span> <span class="o">=</span> <span class="se">\&quot;</span>1,2<span class="se">\&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">BUNDLE_VERSION</span> <span class="o">=</span> <span class="k">$(</span>shell <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Print CFBundleVersion&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">))</span>
</span><span class='line'><span class="nv">GIT_COMMIT</span> <span class="o">=</span> <span class="k">$(</span>shell git log -n1 --format<span class="o">=</span><span class="s1">&#39;%h&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">ALPHA_VERSION</span> <span class="o">=</span> <span class="k">$(</span>BUNDLE_VERSION<span class="k">)</span>-<span class="k">$(</span>BUILD_NUMBER<span class="k">)</span>-<span class="k">$(</span>GIT_COMMIT<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">GIT_COMMIT_REV</span> <span class="o">=</span> <span class="k">$(</span>shell git log -n1 --format<span class="o">=</span><span class="s1">&#39;%h&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">GIT_COMMIT_SHA</span> <span class="o">=</span> <span class="k">$(</span>shell git log -n1 --format<span class="o">=</span><span class="s1">&#39;%H&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">GIT_REMOTE_ORIGIN_URL</span> <span class="o">=</span> <span class="k">$(</span>shell git config --get remote.origin.url<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DATE_MONTH</span> <span class="o">=</span> <span class="k">$(</span>shell date <span class="s2">&quot;+%e %h&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">DATE_VERSION</span> <span class="o">=</span> <span class="k">$(</span>shell date <span class="s2">&quot;+%Y.%m.%d&quot;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CHANGELOG</span> <span class="o">=</span> CHANGELOG.md
</span><span class='line'><span class="nv">CHANGELOG_SHORT</span> <span class="o">=</span> CHANGELOG_SHORT.md
</span><span class='line'>
</span><span class='line'><span class="nv">IPA</span> <span class="o">=</span> ArtsyFolio.ipa
</span><span class='line'><span class="nv">DSYM</span> <span class="o">=</span> ArtsyFolio.app.dSYM.zip
</span><span class='line'>
</span><span class='line'><span class="c"># Phony tasks are tasks that could potentially have a file with the same name in the current folder</span>
</span><span class='line'><span class="nf">.PHONY</span><span class="o">:</span> <span class="m">build clean test ci</span>
</span><span class='line'>
</span><span class='line'><span class="c"># CI Tasks</span>
</span><span class='line'>
</span><span class='line'><span class="nf">ci</span><span class="o">:</span> <span class="m">CONFIGURATION = Debug</span>
</span><span class='line'><span class="nf">ci</span><span class="o">:</span> <span class="m">pods build</span>
</span><span class='line'>
</span><span class='line'><span class="nf">build</span><span class="o">:</span>
</span><span class='line'>  <span class="nb">set</span> -o pipefail <span class="o">&amp;&amp;</span> xcodebuild -workspace <span class="s2">&quot;$(WORKSPACE)&quot;</span> -scheme <span class="s2">&quot;$(SCHEME)&quot;</span> -sdk iphonesimulator -destination <span class="s1">&#39;name=iPad Retina&#39;</span> build | xcpretty -c
</span><span class='line'>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>  xctool -workspace <span class="s2">&quot;$(WORKSPACE)&quot;</span> -scheme <span class="s2">&quot;$(SCHEME)&quot;</span> -configuration <span class="s2">&quot;$(CONFIGURATION)&quot;</span> clean
</span><span class='line'>
</span><span class='line'><span class="nf">test</span><span class="o">:</span>
</span><span class='line'>  <span class="nb">set</span> -o pipefail <span class="o">&amp;&amp;</span> xcodebuild -workspace <span class="s2">&quot;$(WORKSPACE)&quot;</span> -scheme <span class="s2">&quot;$(SCHEME)&quot;</span> -configuration Debug <span class="nb">test</span> -sdk iphonesimulator -destination <span class="s1">&#39;name=iPad Retina&#39;</span> | second_curtain | xcpretty -c --test
</span><span class='line'>
</span><span class='line'><span class="nf">lint</span><span class="o">:</span>
</span><span class='line'>  bundle <span class="nb">exec </span>fui --path Classes find
</span><span class='line'>
</span><span class='line'>  bundle <span class="nb">exec </span>obcd --path Classes find HeaderStyle
</span><span class='line'>  bundle <span class="nb">exec </span>obcd --path <span class="s2">&quot;ArtsyFolio Tests&quot;</span> find HeaderStyle
</span><span class='line'>
</span><span class='line'><span class="c"># Actions</span>
</span><span class='line'>
</span><span class='line'><span class="nf">ipa</span><span class="o">:</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleDisplayName $(BUNDLE_NAME)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleVersion $(DATE_VERSION)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>  ipa build --scheme <span class="k">$(</span>SCHEME<span class="k">)</span> --configuration <span class="k">$(</span>CONFIGURATION<span class="k">)</span> -t
</span><span class='line'>
</span><span class='line'><span class="nf">alpha_version</span><span class="o">:</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleVersion $(ALPHA_VERSION)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">change_version_to_date</span><span class="o">:</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleVersion $(DATE_VERSION)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">set_git_properties</span><span class="o">:</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set GITCommitRev $(GIT_COMMIT_REV)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set GITCommitSha $(GIT_COMMIT_SHA)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set GITRemoteOriginURL $(GIT_REMOTE_ORIGIN_URL)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pods</span><span class="o">:</span> <span class="m">remove_debug_pods</span>
</span><span class='line'><span class="nf">pods</span><span class="o">:</span>
</span><span class='line'>  rm -rf Pods
</span><span class='line'>  bundle install
</span><span class='line'>  bundle <span class="nb">exec </span>pod install
</span><span class='line'>
</span><span class='line'><span class="nf">remove_debug_pods</span><span class="o">:</span>
</span><span class='line'>  perl -pi -w -e <span class="s2">&quot;s{pod &#39;Reveal-iOS-SDK&#39;}{}g&quot;</span> Podfile
</span><span class='line'>
</span><span class='line'><span class="nf">update_bundle_version</span><span class="o">:</span>
</span><span class='line'>  @printf <span class="s1">&#39;What is the new human-readable release version? &#39;</span>; <span class="se">\</span>
</span><span class='line'>      <span class="nb">read </span>HUMAN_VERSION; <span class="se">\</span>
</span><span class='line'>      <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleShortVersionString $$HUMAN_VERSION&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">mogenerate</span><span class="o">:</span>
</span><span class='line'>  @printf <span class="s1">&#39;What is the new Core Data version? &#39;</span>; <span class="se">\</span>
</span><span class='line'>      <span class="nb">read </span>CORE_DATA_VERSION; <span class="se">\</span>
</span><span class='line'>      mogenerator -m <span class="s2">&quot;Resources/CoreData/ArtsyPartner.xcdatamodeld/ArtsyFolio v$$CORE_DATA_VERSION.xcdatamodel/&quot;</span> --base-class ARManagedObject --template-path config/mogenerator/artsy --machine-dir Classes/Models/Generated/ --human-dir /tmp/ --template-var <span class="nv">arc</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Deployment</span>
</span><span class='line'>
</span><span class='line'><span class="nf">deploy</span><span class="o">:</span> <span class="m">ipa distribute</span>
</span><span class='line'>
</span><span class='line'><span class="nf">alpha</span><span class="o">:</span> <span class="m">BUNDLE_NAME = &#39;Folio α&#39;</span>
</span><span class='line'><span class="nf">alpha</span><span class="o">:</span> <span class="m">NOTIFY = 0</span>
</span><span class='line'><span class="nf">alpha</span><span class="o">:</span> <span class="m">alpha_version deploy</span>
</span><span class='line'>
</span><span class='line'><span class="nf">appstore</span><span class="o">:</span> <span class="m">BUNDLE_NAME = &#39;Artsy Folio&#39;</span>
</span><span class='line'><span class="nf">appstore</span><span class="o">:</span> <span class="m">TARGETED_DEVICE_FAMILY = 2</span>
</span><span class='line'><span class="nf">appstore</span><span class="o">:</span> <span class="m">remove_debug_pods update_bundle_version set_git_properties change_version_to_date</span>
</span><span class='line'>
</span><span class='line'><span class="nf">next</span><span class="o">:</span> <span class="m">TARGETED_DEVICE_FAMILY = </span>\&quot;<span class="m">1</span><span class="p">,</span><span class="m">2</span>\&quot;
</span><span class='line'><span class="nf">next</span><span class="o">:</span> <span class="m">update_bundle_version set_git_properties change_version_to_date</span>
</span><span class='line'>
</span><span class='line'><span class="nf">distribute</span><span class="o">:</span>
</span><span class='line'>  cat <span class="k">$(</span>CHANGELOG<span class="k">)</span> | head -n 50 | awk <span class="s1">&#39;{ print } END { print &quot;...&quot; }&#39;</span> &gt; <span class="k">$(</span>CHANGELOG_SHORT<span class="k">)</span>
</span><span class='line'>  curl <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">status</span><span class="o">=</span>2 <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">notify</span><span class="o">=</span><span class="k">$(</span>NOTIFY<span class="k">)</span> <span class="se">\</span>
</span><span class='line'>   -F <span class="s2">&quot;notes=&lt;$(CHANGELOG_SHORT)&quot;</span> <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">notes_type</span><span class="o">=</span>1 <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">ipa</span><span class="o">=</span>@<span class="k">$(</span>IPA<span class="k">)</span> <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">dsym</span><span class="o">=</span>@<span class="k">$(</span>DSYM<span class="k">)</span> <span class="se">\</span>
</span><span class='line'>   -H <span class="s1">&#39;X-HockeyAppToken: $(HOCKEYAPP_TOKEN)&#39;</span> <span class="se">\</span>
</span><span class='line'>   https://rink.hockeyapp.net/api/2/apps/upload <span class="se">\</span>
</span><span class='line'>   | grep -v <span class="s2">&quot;errors&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That gives you a sense of the commands that you can run from the terminal in our projects, next we need to look at the <code>.travis.yml</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nf">language</span><span class="o">:</span> <span class="m">objective-c</span>
</span><span class='line'><span class="nf">cache</span><span class="o">:</span>
</span><span class='line'>  - bundler
</span><span class='line'>  - cocoapods
</span><span class='line'>
</span><span class='line'><span class="nf">env</span><span class="o">:</span>
</span><span class='line'>  - <span class="nv">UPLOAD_IOS_SNAPSHOT_BUCKET_NAME</span><span class="o">=</span>eigen-ci UPLOAD_IOS_SNAPSHOT_BUCKET_PR...
</span><span class='line'>
</span><span class='line'><span class="nf">before_install</span><span class="o">:</span>
</span><span class='line'>  - <span class="s1">&#39;echo &#39;&#39;gem: --no-ri --no-rdoc&#39;&#39; &gt; ~/.gemrc&#39;</span>
</span><span class='line'>  - cp .netrc ~
</span><span class='line'>  - chmod 600 .netrc
</span><span class='line'>  - pod repo add artsy https://github.com/artsy/Specs.git
</span><span class='line'>
</span><span class='line'><span class="nf">before_script</span><span class="o">:</span>
</span><span class='line'>  - gem install second_curtain
</span><span class='line'>  - make ci
</span><span class='line'>
</span><span class='line'><span class="nf">script</span><span class="o">:</span>
</span><span class='line'>  - make <span class="nb">test</span>
</span><span class='line'>  - make lint
</span></code></pre></td></tr></table></div></figure>


<p>This is nice and simple. It was built to use multiple travis build steps. This makes the CI output a lot more readable as an end user. Travis will by default collapse the shell output for different build stages leaving only the <code>script</code> stage defaulting to being exposed. Here is an example of what you see on a failing test:</p>

<center>
<img src="http://artsy.github.io/images/2014-08-08-CocoaPods-Caching/failing_travis_screenshot.png" alt='Travis CI Failure'>
</center>


<p>We use a gem with a binary in <a href="https://github.com/AshFurrow/second_curtain/">second_curtain</a>, and this came with bundler caching issues in Travis. The solution was to ignore bundler and run <code>gem install second_curtain</code> each time. To increase the speed we also ensured that documentation is not being generated. If you are interested in what&#8217;s going on with the <code>.netrc</code>, read my blog post on <a href="http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/">Artsy&#8217;s first Closed Source Pod</a>.</p>

<p>We will continue pushing the state of the art in iOS deployment, in building our own tools and using everything available to increase developer happiness. If you&#8217;re into this we&#8217;re always looking to hire people with a good open source track record or street smarts. Here&#8217;s <a href="https://artsy.net/job/mobile-engineer">the jobs page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking a Snapshot with Second Curtain]]></title>
    <link href="http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain/"/>
    <updated>2014-08-07T11:46:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain</id>
    <content type="html"><![CDATA[<p>At Artsy, we try hard to <a href="https://speakerdeck.com/orta/getting-eigen-out?slide=35">test</a>
our iOS applications to ensure that we avoid regressions and have a clearly
defined spec of how our apps should look and behave. One of the core pieces of
our testing setup is <a href="https://github.com/facebook/ios-snapshot-test-case">FBSnapshotTestCase</a>,
a library written by Facebook to compare views at runtime with images of those
views that are known to be correct. If the images differ, the test fails. We
also use <a href="https://travis-ci.org">Travis</a> for continuous integration.</p>

<p>Lately, we&#8217;ve been noticing a friction between the developers on the iOS team
and the tools we&#8217;re using to test our apps: while Travis allows us to easily
access the logs of test runs, it can only indicate that a snapshot test failed,
not why it failed. That&#8217;s because the images that are compared are locked on
Travis&#8217; machine – we cannot access those images, so we can&#8217;t see the
differences. This is <em>really</em> promblematic when the tests pass locally but fail
only on Travis.</p>

<!-- more -->


<p>A few weeks ago, <a href="http://twitter.com/orta">Orta</a> and I were discussing this
problem and we came up with a potential solution. Since the images were stored
on disk on Travis&#8217; machine, why not just upload them somewhere we <em>can</em> see
them? Like an S3 bucket. We could even generate a basic HTML page showing you
the different test failures.</p>

<p>Time passed and, later on, I had tests passing locally but failing on Travis.
I saw an opportunity to build something new. I&#8217;m not a proficient Ruby developer,
but I enjoy learning new things, so I decided to create a Ruby gem that could
fit within our existing testing pipeline. A lot of the structure for the code
came from an existing gem we already use with Travis, <a href="https://github.com/supermarin/xcpretty">xcpretty</a>.
With an example of how gems that support iOS testing are written, I was on my
way to creating my own.</p>

<p>At first, things were very difficult. While I had contributed small patches to
existing Ruby projects before, I had never created a brand new one from scratch.
The existing <a href="http://guides.rubygems.org/make-your-own-gem/">guides</a> were very
helpful, and I found help from the CocoaPods developers when I had questions
about things like the arcane semantics of Ruby&#8217;s <code>require</code> syntax.</p>

<p>Eventually, I had a working proof-of-concept. Everything seemed ready to go, and
I prepared to incorporate my new tool, which I called <a href="https://github.com/AshFurrow/second_curtain">Second Curtain</a>,
into my pull request on the Artsy repo. But there was a problem.</p>

<p>Second Curtain relies on environment variables to get access to the S3 bucket
where it stores the images. I planned on using Travis&#8217; system to <a href="http://docs.travis-ci.com/user/encryption-keys/">encrypt</a>
those credentials. It turns out, for very good reasons, encrypted environment
variables are not available on pull requests created on forks of repositories.
This is a problem because of the way that <a href="http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/">Artsy uses GitHub</a>.
While it&#8217;s not a problem for a closed-source repository to have (restrictive)
access to an S3 bucket, it would be irresponsible to expose S3 credentials for
an open-source project. I&#8217;m <a href="https://github.com/AshFurrow/second_curtain/issues/5">working</a>
on a solution.</p>

<p>Orta helped with the design aspect of the tool; while uploading the images was
sufficient, we could make the process of seeing the differences between the two
images even easier. He created a <a href="https://eigen-ci.s3.amazonaws.com/snapshots/2014-08-04--15-47/index.html">HTML page</a>
that would allow developers to see the before-and-after versions by moving their
mouse cursor over the different images.</p>

<p><img src="http://static.ashfurrow.com/github/second_curtain.png" alt="Image Diff" /></p>

<p>In the end, I got Second Curtain to work with Artsy&#8217;s iOS repository and I
discovered the discrepency between the two images: due to a timezone difference
between my computer and Travis&#8217;, a date was being formatted differently. Not a
difficult thing to fix, but not something I would have ever been able to
discover had I not been able to see the images side-by-side.</p>

<p>So after all that, one line of Objective-C was changed and the tests passed – my
pull request was merged. I learnt a lot about how Ruby developers structure
their code and what tools they use to write software. While I&#8217;m happy to return
to iOS apps for a while, it was a great experience and I&#8217;m hoping to bring some
of the ideas I discovered writing Ruby back to Objective-C.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspect-Oriented Programming and ARAnalytics]]></title>
    <link href="http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics/"/>
    <updated>2014-08-04T14:52:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics</id>
    <content type="html"><![CDATA[<p>Analytics are common in iOS applications. They help inform our decisions
about products. Since analytics are so common, Artsy developed a library called
<a href="https://github.com/orta/ARAnalytics">ARAnalytics</a>. This library provides a
single interface to many different backend analytics providers, freeing
developers from having to write code for each of the providers that they&#8217;re
using.</p>

<p>Let&#8217;s consider a typical view controller on iOS. View controllers on iOS
represent the glue code between models and views. When a model changes, the view
controller updates the appearance of the UI. Similarly, when the UI is
interacted with by the user, the view controller updates the model. This is the
core of any standard iOS application.</p>

<p>So let&#8217;s say that a button is pressed. We&#8217;ll handle that interaction in a
method called <code>buttonWasPressed:</code>. We&#8217;ll want to update our model, but also to
track the analytics event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">buttonWasPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">hearted</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">ARAnalytics</span> <span class="n">event</span><span class="o">:</span><span class="s">@&quot;hearted&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple enough, but consider that the analytics tracking code doesn&#8217;t fall within
our definition of a view controller – the button handler just happens to be a
convenient place to put the tracking code. Also consider that <em>every single</em>
button handler is going to have to have similar code implemented.</p>

<h2>There has to be a better way.</h2>

<!-- more -->


<p><a href="http://twitter.com/steipete">Pete Steinberger</a> and <a href="http://twitter.com/orta">Orta Therox</a>
were talking and the topic of <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">Aspect-Oriented Programming</a>,
specifically in the context of analytics. AOP takes a look at the different
<em>conerns</em> of an application – logical, cohesive units of functionality. While
most programming paradigms, including those used with Objective-C, group and
encapsulate these concerns, there are some concerns that are &#8220;cross-cutting&#8221;
because they are involved through several other concerns.</p>

<p>Analytics is such a cross-cutting concern. That makes it a prime target for
being abstracted away using AOP. Using <a href="http://albertodebortoli.github.io/blog/2014/03/25/an-aspect-oriented-approach-programming-to-ios-analytics/">another blog post</a>  as an example, we set about <a href="https://github.com/orta/ARAnalytics/pull/74">integrating an AOP-like DSL within ARAnalytics</a>
that would allow you to define all of your analytics in one spot.</p>

<p>The interface would be simple. When providing your API keys to the various
backend services you&#8217;d like to use with ARAnalytics, you&#8217;d also provide a
dictionary specifying the classes you&#8217;d like us to &#8220;hook into&#8221;. Whenever a
selector from an instance of the given class was invoked, we&#8217;d execute the
analytics event specified in the dictionary.</p>

<p>Since Objective-C has a dynamic runtime, we could have swizzled the instance
methods on the classes you specified in the dictionary. This gets a little
tricky and represents a lot of work for us. We could directly swizzle the
instance methods on the classes in question, but wrapping parameters of variable
types and in various numbers becomes a chore. If we didn&#8217;t get it done
perfectly, we&#8217;d risk introducing bugs into the entire application.</p>

<p>I wrote a proof-of-concept of analytics using AOP with <a href="http://reactivecocoa.io">ReactiveCocoa</a>.
It worked, but was a little hacky since it involved the swizzling of <code>alloc</code>.
ReactiveCocoa is also a large framework to be included just for the sake of
analytics. Additionally, its interface exposed ReactiveCocoa&#8217;s <code>RACTuple</code> class,
which smells like a leaky abstraction.</p>

<h2>What could we do?</h2>

<p>Well, about the same time, Pete Steinberger open sourced a new framework just
for AOP called <a href="https://github.com/steipete/Aspects">Aspects</a>. Pete did all the
difficult work of swizzling methods with variable parameter lists, including
wrapping primitive parameters in values.</p>

<p>Pete and I worked together to get Aspects working with ARAnalytics, removing our
dependency on ReactiveCocoa.</p>

<h2>How to Use it</h2>

<p>Using ARAnalytics with the new DSL is super-easy. Just add either <code>ARAnalytics</code>
or <code>ARAnalytics/DSL</code> to your podfile, specifying a version of at least 2.6. Run
<code>pod install</code> and you&#8217;re ready to get started.</p>

<p>Since all of your analytics are going to be specified in one spot, and that spot
is going to get rather large, I&#8217;d recommend creating an Objective-C category on
your app delegate to set up all of your analytics. Then you can call this
<code>setupAnalytics</code> method when your app launches.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;ARAppDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ARAppDelegate</span> <span class="nl">(Analytics)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupAnalytics</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;ARAnalytics/DSL.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ARAppDelegate</span> <span class="nl">(Analytics)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupAnalytics</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">ARAnalytics</span> <span class="n">setupWithAnalytics</span><span class="o">:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>      <span class="cm">/* keys */</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">configuration</span><span class="o">:</span>
</span><span class='line'>    <span class="err">@</span><span class="p">{</span>
</span><span class='line'>      <span class="nl">ARAnalyticsTrackedEvents:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>          <span class="err">@</span><span class="p">{</span>
</span><span class='line'>              <span class="nl">ARAnalyticsClass:</span> <span class="n">MyViewController</span><span class="p">.</span><span class="n">class</span><span class="p">,</span>
</span><span class='line'>              <span class="nl">ARAnalyticsDetails:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>                  <span class="err">@</span><span class="p">{</span>
</span><span class='line'>                      <span class="nl">ARAnalyticsEventName:</span> <span class="s">@&quot;hearted&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nl">ARAnalyticsSelectorName:</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">buttonWasPressed</span><span class="o">:</span><span class="p">)),</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our <code>buttonWasPressed:</code> method is <em>very</em> straightforward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">buttonWasPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">hearted</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view controller is now <em>only</em> responsible for what it should be responsible
for: mediating interactions between the view and the model. Awesome! Even
cooler, we can provide fine-grain control over which analytics events are
invoked and with what properties they are sent with. Let&#8217;s take a look.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">ARAnalytics</span> <span class="n">setupWithAnalytics</span><span class="o">:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* keys */</span>
</span><span class='line'><span class="p">}</span> <span class="n">configuration</span><span class="o">:</span>
</span><span class='line'><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="nl">ARAnalyticsTrackedEvents:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>      <span class="err">@</span><span class="p">{</span>
</span><span class='line'>          <span class="nl">ARAnalyticsClass:</span> <span class="n">MyViewController</span><span class="p">.</span><span class="n">class</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">ARAnalyticsDetails:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>              <span class="err">@</span><span class="p">{</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsEventName:</span> <span class="s">@&quot;hearted&quot;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsSelectorName:</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">buttonWasPressed</span><span class="o">:</span><span class="p">)),</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsEventProperties:</span> <span class="o">^</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">(</span><span class="n">MyViewController</span> <span class="o">*</span><span class="n">controller</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">parameters</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">UIButton</span> <span class="o">*</span><span class="n">button</span> <span class="o">=</span> <span class="n">parameters</span><span class="p">.</span><span class="n">firstObject</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">NSString</span> <span class="o">*</span><span class="n">buttonTitle</span> <span class="o">=</span> <span class="p">[</span><span class="n">button</span> <span class="n">titleForState</span><span class="o">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>                        <span class="k">return</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>                            <span class="s">@&quot;view_title&quot;</span> <span class="o">:</span> <span class="n">controller</span><span class="p">.</span><span class="n">title</span> <span class="o">?:</span> <span class="s">@&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="s">@&quot;button_title&quot;</span> <span class="o">:</span> <span class="n">buttonTitle</span> <span class="o">?:</span> <span class="s">@&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="p">};</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsShouldFire:</span> <span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">MyViewController</span> <span class="o">*</span><span class="n">controller</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">parameters</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">return</span> <span class="cm">/* selective disable firing of analytics */</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you see that even though you&#8217;re defining your analytics once, at application
startup, you&#8217;re still able to provide dynamic, per-instance behaviour and event
properties.</p>

<p>Finally, we&#8217;ve also written support for page views. In a few lines, you can
have every view controller track its page view with ARAnalytics.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">ARAnalytics</span> <span class="n">setupWithAnalytics</span><span class="o">:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* keys */</span>
</span><span class='line'><span class="p">}</span> <span class="n">configuration</span><span class="o">:</span>
</span><span class='line'><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="nl">ARAnalyticsTrackedScreens:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>      <span class="err">@</span><span class="p">{</span>
</span><span class='line'>          <span class="nl">ARAnalyticsClass:</span> <span class="n">UIViewController</span><span class="p">.</span><span class="n">class</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">ARAnalyticsDetails:</span> <span class="err">@</span><span class="p">[</span> <span class="c1">// default selector on iOS is viewDidAppear:</span>
</span><span class='line'>              <span class="err">@</span><span class="p">{</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsPageNameKeyPath:</span> <span class="s">@&quot;title&quot;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will track a page view with the title the same as the view
controller&#8217;s <code>title</code> property, but just like with events you can provide
fine-grained handling.</p>

<h2>Some Limitations</h2>

<p>There is a <a href="https://github.com/steipete/Aspects/issues/11">limitation</a> on
Aspects that wasn&#8217;t fully understood until we used the new AOP approach to
analytics in the Artsy app. Selectors can only be &#8220;hooked into&#8221; once per class
hierarchy. That  means that you cannot create a tracked events for two
difference view controllers, both on the <code>viewWillAppear:</code> selector. This is a
temporary limitation while the Aspects library is being worked on. In the mean
time, you are free to use the <a href="https://github.com/orta/ARAnalytics/tree/ashfurrow-temporary-dsl-fix">original implementation</a>
with ReactiveCocoa, which doesn&#8217;t have this limitation and which we are using
currently.</p>

<h2>What we Learnt</h2>

<p>AOP is a really cool paradigm that can reduce tight coupling in your code and
increase your overall level of cohesion. Its applications extend beyond just
analytics – any time you have a behaviour that&#8217;s being exhibited in several
abstractions in your code, you should consider if using AOP to replace that
behaviour might make for cleaner code and more cohesive abstractions.</p>

<p>Finally, I got to make my first significant contribution to open source at
Artsy. It was awesome to be able to collaborate with Pete and Orta on this
project, as well as receive feedback from developers who are already using
ARAnalytics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retain scroll position in infinite scroll]]></title>
    <link href="http://artsy.github.io/blog/2014/07/09/retain-scroll-position-in-infinite-scroll/"/>
    <updated>2014-07-09T17:29:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/07/09/retain-scroll-position-in-infinite-scroll</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/4b7e6aefa00b96ba2804b235aaaa811bbb893c4e/687474703a2f2f7777772e6578706c61696e786b63642e636f6d2f77696b692f696d616765732f352f35362f696e66696e6974655f7363726f6c6c696e672e706e67" alt="Maybe we should give up on the whole idea of a 'back' button. 'Show me that thing I was looking at a moment ago' might just be too complicated an idea for the modern web." /></p>

<p>Although <a href="https://news.ycombinator.com/item?id=7314965">some find infinite scroll to be a contentious topic</a> at Artsy we&#8217;ve found it to be a useful element in many portions of our site such as <a href="https://artsy.net/browse/artworks?medium=prints&amp;price_range=-1%3A1000">filtering</a>. However, we&#8217;ve run into a common and painful usability issue with infinite scroll. That is clicking on an item redirects to the next page, losing your scroll position, and losing your place when going back. To solve this we have come up with a clever little solution using an iframe.</p>

<!-- more -->


<p>We&#8217;re pleased to announce we&#8217;ve open sourced this solution into <a href="https://github.com/artsy/scroll-frame">scrollFrame</a>.</p>

<p>scrollFrame borrows from sites like Pinterest that avoid this problem by opening the next page in a <a href="http://en.wikipedia.org/wiki/Modal_window">modal window</a>. Only instead of having to build your entire page client-side, scrollFrame will intercept your click and open the next page in an iframe that sits on top of your current page and covers your viewport (acting as a sort of modal that doesn&#8217;t look like a modal). scrollFrame will then hook into the <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history">HTML5 history API</a> to remove the iframe modal on back button and keep your URL up to date. <a href="https://artsy.net/browse">See it in action on our browse page!</a></p>

<p>scrollFrame only solves this specific problem with infinite scroll but we&#8217;ve gotten a lot of mileage out of it and we hope you will too!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artsy's first closed source Pod]]></title>
    <link href="http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/"/>
    <updated>2014-06-20T17:53:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod</id>
    <content type="html"><![CDATA[<p>When I joined Artsy, <a href="http://code.dblock.org">dB</a> pitched me this idea: <em>Open source as default.</em></p>

<p>I took this to heart. I genuinely believe the idea behind the philosophy. It&#8217;s cool that our real product isn&#8217;t our implementations on the web or native but the data which powers it - <a href="https://artsy.net/theartgenomeproject">the Art Genome Project</a>. Similarly, I spend a bunch of time <a href="https://github.com/AshFurrow/ARCollectionViewMasonryLayout">on</a> <a href="https://github.com/dblock/ARASCIISwizzle">open</a> <a href="https://github.com/dblock/ios-snapshot-test-case-expecta">sourcing</a> <a href="https://github.com/dblock/ARTiledImageView">solid</a> <a href="https://github.com/dstnbrkr/DRBOperationTree">abstractions</a> <a href="https://github.com/orta/ORSimulatorKeyboardAccessor">from</a> <a href="https://github.com/orta/ORStackView">our</a> <a href="https://github.com/orta/ARAnalytics">apps</a>, always taking the opinion if something is used in more than one place, it should be open sourced.</p>

<p>This week I pushed some libraries that were a bit different, read on to find out why.</p>

<!-- more -->


<h2>The problem</h2>

<p>I was modernizing a section of <a href="http://orta.github.io/#folio-header-unit">Folio</a> that hasn&#8217;t changed in 2 years to use custom UILabel subclasses consistent with <a href="https://iphone.artsy.net">the Artsy iOS app</a> and realized I was copying and pasting a large amount of code from one app to the other. This got me thinking about ways to keep this code in one place, as we might start another project which needs these same styles soon.</p>

<h2>The solution</h2>

<p>I didn&#8217;t want to put it on the public CocoaPods Spec Repo, because it&#8217;s not very relevant to the larger community, but in keeping with our philosophy of &#8220;open source by default,&#8221; I definitely wanted to publish it as an example for others. The most elegant answer was to create our own <a href="https://github.com/artsy/specs">public Specs Repo</a>, which serves as a good reference when people want to know what a private specs repo looks like.</p>

<p>Like anyone who has tried to modularize a pretty large code-base, it turns out a lot of things were connected together. I couldn&#8217;t just build my <a href="http://github.com/Artsy/Artsy-UILabels">Artsy+UILabels</a> repo and put everything in there. Instead I had to also build Artsy+UIFonts and <a href="http://github.com/Artsy/Artsy-UIColors">Artsy+UIColors</a>.</p>

<p>One of the good things about having to build three libraries is that I became very familiar with <code>pod lib create</code>. This is a command for building the scaffolding around a CocoaPod, making it much easier to create something fast. We had been holding off doing a <a href="https://github.com/CocoaPods/pod-template/pull/33">big update</a> to the command because no-one knew what WWDC would bring. Now we know, so I&#8217;ve worked on a new version of the command that programmatically manipulates an example project via <a href="https://github.com/CocoaPods/Xcodeproj">xcodeproj</a>. I&#8217;ve used it in creating all of these libraries. Expect to see it on the CocoaPods blog soon.</p>

<h2>Caveat</h2>

<p>I built three libraries, but one of them is unique. I modelled Artsy+UIFonts from <a href="http://kylefuller.co.uk">Kyle Fuller</a>&#8217;s <a href="https://github.com/kylef/OpenSans-pod">OpenSans-pod</a>, where the CocoaPod has the font resources and installing it moves them into your project. This is great for a free or open-source font, but would break commercial font licenses. For that reason, we don&#8217;t have the ability to open source that project. Thus Artsy Mobile&#8217;s first closed-source library.</p>

<p>This is a great example of how you can build a private specs repo, whilst the public-private aspect is not applicable to most companies. I find it to be a nice halfway house between open source as default, and keeping something internal. For more info on setting up your own private specs repos, <a href="http://guides.cocoapods.org/making/private-cocoapods.html">check the guides</a>.</p>
]]></content>
  </entry>
  
</feed>
